/* CIF Process (0, 0), (800, 100) */
process UartHwasDriver;
    /* CIF Text (0, 150), (400, 500) */
    dcl Uartvar UartHwas;
    dcl Uartvar0 UartHwas;
    dcl Uartvar1 UartHwas;
    dcl Uartvar2 UartHwas;
    dcl Uartvar3 UartHwas;
    dcl Uartvar4 UartHwas;
    dcl Configvar UartHwasConfig;
    dcl Pmcvar PmcHwasUart;
    dcl Bitsvaluevar Word;
    dcl Bitsmaskvar WordMask;
    dcl Bytevar Byte;
    dcl Destinationaddressvar DestinationAddress;
    dcl Sourceaddressvar SourceAddress;
    dcl Irqnumbervar InterruptNumber;
    dcl Pioconfigvar PioHwasPinConfig;
    dcl Piovar PioHwas;
    dcl Io_uarthwas_readbyteasynccmd_pi ReadByteAsyncCmd_Type;
    dcl Io_uarthwas_sendbyteasynccmd_pi SendByteAsyncCmd_Type;
    dcl Io_interruptsubscription_interrupt_pi Interrupt_Type;
    dcl Io_uarthwas_readbyteasynccmd_ri ReadByteAsyncCmd_Type1;
    dcl Io_uarthwas_sendbyteasynccmd_ri SendByteAsyncCmd_Type1;
    /* CIF ENDTEXT */
    /* CIF Procedure (0, 900), (800, 50) */
    procedure UpdateLocalUart;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in Uart UartHwas,
            in Config UartHwasConfig;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            -- Update local UART variable
            -- Is instance equal to 0?
            /* CIF Decision (0, 862), (400, 50) */
            decision Config.Minstance = UartHwas_Instance_0;
                /* CIF Answer (0, 937), (400, 50) */
                (True):
                    /* CIF Task (0, 1012), (100, 50) */
                    task Uartvar0 := Uart;
                    /* CIF Join (0, 1087), (100, 50) */
                    join condition_1;
                /* CIF Answer (600, 937), (400, 50) */
                (False):
                    -- Is instance equal to 1?
                    /* CIF Decision (600, 937), (400, 50) */
                    decision Config.Minstance = UartHwas_Instance_1;
                        /* CIF Answer (600, 1012), (400, 50) */
                        (True):
                            /* CIF Task (600, 1087), (100, 50) */
                            task Uartvar1 := Uart;
                            /* CIF Join (600, 1162), (100, 50) */
                            join condition_2;
                        /* CIF Answer (1200, 1012), (400, 50) */
                        (False):
                            -- Is instance equal to 2?
                            /* CIF Decision (1200, 1012), (400, 50) */
                            decision Config.Minstance = UartHwas_Instance_2;
                                /* CIF Answer (1200, 1087), (400, 50) */
                                (True):
                                    /* CIF Task (1200, 1162), (100, 50) */
                                    task Uartvar2 := Uart;
                                    /* CIF Join (1200, 1237), (100, 50) */
                                    join condition_3;
                                /* CIF Answer (1800, 1087), (400, 50) */
                                (False):
                                    -- Is instance equal to 3?
                                    /* CIF Decision (1800, 1087), (400, 50) */
                                    decision Config.Minstance = UartHwas_Instance_3;
                                        /* CIF Answer (1800, 1162), (400, 50) */
                                        (True):
                                            /* CIF Task (1800, 1237), (100, 50) */
                                            task Uartvar3 := Uart;
                                            /* CIF Join (1800, 1312), (100, 50) */
                                            join condition_4;
                                        /* CIF Answer (2400, 1162), (400, 50) */
                                        (False):
                                            -- Is instance equal to 4?
                                            /* CIF Decision (2400, 1162), (400, 50) */
                                            decision Config.Minstance = UartHwas_Instance_4;
                                                /* CIF Answer (2400, 1237), (400, 50) */
                                                (True):
                                                    /* CIF Task (2400, 1312), (100, 50) */
                                                    task Uartvar4 := Uart;
                                                    /* CIF Join (2400, 1387), (100, 50) */
                                                    join condition_5;
                                                /* CIF Answer (3000, 1237), (400, 50) */
                                                (False):
                                                    /* CIF Join (3000, 1312), (100, 50) */
                                                    join condition_5;
                                            enddecision;
                                            /* CIF Label (3600, 1312), (100, 50) */
                                            condition_5:
                                            /* CIF Join (3600, 1387), (100, 50) */
                                            join condition_4;
                                    enddecision;
                                    /* CIF Label (4200, 1237), (100, 50) */
                                    condition_4:
                                    /* CIF Join (4200, 1312), (100, 50) */
                                    join condition_3;
                            enddecision;
                            /* CIF Label (4800, 1162), (100, 50) */
                            condition_3:
                            /* CIF Join (4800, 1237), (100, 50) */
                            join condition_2;
                    enddecision;
                    /* CIF Label (5400, 1087), (100, 50) */
                    condition_2:
                    /* CIF Join (5400, 1162), (100, 50) */
                    join condition_1;
            enddecision;
            /* CIF Label (6000, 1012), (100, 50) */
            condition_1:
    return;
    endprocedure;
    /* CIF Procedure (0, 975), (800, 50) */
    procedure GetLocalUart;
        /* CIF Start (0, 0), (200, 75) */
        START;
            -- Assing proper local UART to uartVar, according to irq num
            -- Is instance equal to 0?
            /* CIF Decision (0, 112), (400, 50) */
            decision Irqnumbervar = 7;
                /* CIF Answer (0, 187), (400, 50) */
                (True):
                    /* CIF Task (0, 262), (100, 50) */
                    task Uartvar := Uartvar0;
                    /* CIF Join (0, 337), (100, 50) */
                    join condition_1;
                /* CIF Answer (600, 187), (400, 50) */
                (False):
                    -- Is instance equal to 1?
                    /* CIF Decision (600, 187), (400, 50) */
                    decision Irqnumbervar = 8;
                        /* CIF Answer (600, 262), (400, 50) */
                        (True):
                            /* CIF Task (600, 337), (100, 50) */
                            task Uartvar := Uartvar1;
                            /* CIF Join (600, 412), (100, 50) */
                            join condition_2;
                        /* CIF Answer (1200, 262), (400, 50) */
                        (False):
                            -- Is instance equal to 2?
                            /* CIF Decision (1200, 262), (400, 50) */
                            decision Irqnumbervar = 44;
                                /* CIF Answer (1200, 337), (400, 50) */
                                (True):
                                    /* CIF Task (1200, 412), (100, 50) */
                                    task Uartvar := Uartvar2;
                                    /* CIF Join (1200, 487), (100, 50) */
                                    join condition_3;
                                /* CIF Answer (1800, 337), (400, 50) */
                                (False):
                                    -- Is instance equal to 3?
                                    /* CIF Decision (1800, 337), (400, 50) */
                                    decision Irqnumbervar = 45;
                                        /* CIF Answer (1800, 412), (400, 50) */
                                        (True):
                                            /* CIF Task (1800, 487), (100, 50) */
                                            task Uartvar := Uartvar3;
                                            /* CIF Join (1800, 562), (100, 50) */
                                            join condition_4;
                                        /* CIF Answer (2400, 412), (400, 50) */
                                        (False):
                                            -- Is instance equal to 4?
                                            /* CIF Decision (2400, 412), (400, 50) */
                                            decision Irqnumbervar = 46;
                                                /* CIF Answer (2400, 487), (400, 50) */
                                                (True):
                                                    /* CIF Task (2400, 562), (100, 50) */
                                                    task Uartvar := Uartvar4;
                                                    /* CIF Join (2400, 637), (100, 50) */
                                                    join condition_5;
                                                /* CIF Answer (3000, 487), (400, 50) */
                                                (False):
                                                    /* CIF Join (3000, 562), (100, 50) */
                                                    join condition_5;
                                            enddecision;
                                            /* CIF Label (3600, 562), (100, 50) */
                                            condition_5:
                                            /* CIF Join (3600, 637), (100, 50) */
                                            join condition_4;
                                    enddecision;
                                    /* CIF Label (4200, 487), (100, 50) */
                                    condition_4:
                                    /* CIF Join (4200, 562), (100, 50) */
                                    join condition_3;
                            enddecision;
                            /* CIF Label (4800, 412), (100, 50) */
                            condition_3:
                            /* CIF Join (4800, 487), (100, 50) */
                            join condition_2;
                    enddecision;
                    /* CIF Label (5400, 337), (100, 50) */
                    condition_2:
                    /* CIF Join (5400, 412), (100, 50) */
                    join condition_1;
            enddecision;
            /* CIF Label (6000, 262), (100, 50) */
            condition_1:
    return;
    endprocedure;
    /* CIF Procedure (0, 1050), (800, 50) */
    procedure InitPmc;
        /* CIF Start (0, 0), (200, 75) */
        START;
            /* CIF Task (0, 187), (100, 50) */
            task Pmcvar.Pmc_pcer0_offset := 1074660880;
            /* CIF Task (0, 262), (100, 50) */
            task Pmcvar.Pmc_pcer1_offset := 1074661120;
            /* CIF Task (0, 337), (100, 50) */
            task Pmcvar.Pmc_pcxr0_pid7_uart0_mask := 128;
            /* CIF Task (0, 412), (100, 50) */
            task Pmcvar.Pmc_pcxr0_pid8_uart1_mask := 256;
            /* CIF Task (0, 487), (100, 50) */
            task Pmcvar.Pmc_pcxr1_pid44_uart2_mask := 4096;
            /* CIF Task (0, 562), (100, 50) */
            task Pmcvar.Pmc_pcxr1_pid45_uart3_mask := 8192;
            /* CIF Task (0, 637), (100, 50) */
            task Pmcvar.Pmc_pcxr1_pid46_uart4_mask := 16384;
    return;
    endprocedure;
    /* CIF Procedure (0, 1125), (800, 50) */
    procedure InitPio;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in Config UartHwasConfig;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            -- Config Uart pios
            -- Is instance equal to 0?
            /* CIF Decision (0, 862), (400, 50) */
            decision Config.Minstance = UartHwas_Instance_0;
                /* CIF Answer (0, 937), (400, 50) */
                (True):
                    /* CIF Task (0, 1012), (100, 50) */
                    task Pioconfigvar.Mportconfig := PioHwas_Port_A;
                    /* CIF Task (0, 1087), (100, 50) */
                    task Pioconfigvar.Mpinconfig := 9;
                    /* CIF Task (0, 1162), (100, 50) */
                    task Pioconfigvar.Mdirectionconfig := PioHwas_Direction_Input;
                    /* CIF Task (0, 1237), (100, 50) */
                    task Pioconfigvar.Mcontrolconfig := PioHwas_Control_PeripheralA;
                    -- Init uart Rx pin
                    /* CIF ProcedureCall (0, 1312), (100, 50) */
                    call PioHwas_InitPin_Ri(Piovar, Pioconfigvar);
                    /* CIF Task (0, 1387), (100, 50) */
                    task Pioconfigvar.Mpinconfig := 10;
                    /* CIF Task (0, 1462), (100, 50) */
                    task Pioconfigvar.Mdirectionconfig := PioHwas_Direction_Output;
                    -- Init uart Tx pin
                    /* CIF ProcedureCall (0, 1537), (100, 50) */
                    call PioHwas_InitPin_Ri(Piovar, Pioconfigvar);
                    /* CIF Join (0, 1612), (100, 50) */
                    join condition_1;
                /* CIF Answer (600, 937), (400, 50) */
                (False):
                    -- Is instance equal to 1?
                    /* CIF Decision (600, 937), (400, 50) */
                    decision Config.Minstance = UartHwas_Instance_1;
                        /* CIF Answer (600, 1012), (400, 50) */
                        (True):
                            /* CIF Task (600, 1087), (100, 50) */
                            task Pioconfigvar.Mportconfig := PioHwas_Port_A;
                            /* CIF Task (600, 1162), (100, 50) */
                            task Pioconfigvar.Mpinconfig := 5;
                            /* CIF Task (600, 1237), (100, 50) */
                            task Pioconfigvar.Mdirectionconfig := PioHwas_Direction_Input;
                            /* CIF Task (600, 1312), (100, 50) */
                            task Pioconfigvar.Mcontrolconfig := PioHwas_Control_PeripheralC;
                            -- Init uart Rx pin
                            /* CIF ProcedureCall (600, 1387), (100, 50) */
                            call PioHwas_InitPin_Ri(Piovar, Pioconfigvar);
                            /* CIF Task (600, 1462), (100, 50) */
                            task Pioconfigvar.Mpinconfig := 6;
                            /* CIF Task (600, 1537), (100, 50) */
                            task Pioconfigvar.Mdirectionconfig := PioHwas_Direction_Output;
                            -- Init uart Tx pin
                            /* CIF ProcedureCall (600, 1612), (100, 50) */
                            call PioHwas_InitPin_Ri(Piovar, Pioconfigvar);
                            /* CIF Join (600, 1687), (100, 50) */
                            join condition_2;
                        /* CIF Answer (1200, 1012), (400, 50) */
                        (False):
                            -- Is instance equal to 2?
                            /* CIF Decision (1200, 1012), (400, 50) */
                            decision Config.Minstance = UartHwas_Instance_2;
                                /* CIF Answer (1200, 1087), (400, 50) */
                                (True):
                                    /* CIF Task (1200, 1162), (100, 50) */
                                    task Pioconfigvar.Mportconfig := PioHwas_Port_D;
                                    /* CIF Task (1200, 1237), (100, 50) */
                                    task Pioconfigvar.Mpinconfig := 25;
                                    /* CIF Task (1200, 1312), (100, 50) */
                                    task Pioconfigvar.Mdirectionconfig := PioHwas_Direction_Input;
                                    /* CIF Task (1200, 1387), (100, 50) */
                                    task Pioconfigvar.Mcontrolconfig := PioHwas_Control_PeripheralC;
                                    -- Init uart Rx pin
                                    /* CIF ProcedureCall (1200, 1462), (100, 50) */
                                    call PioHwas_InitPin_Ri(Piovar, Pioconfigvar);
                                    /* CIF Task (1200, 1537), (100, 50) */
                                    task Pioconfigvar.Mpinconfig := 26;
                                    /* CIF Task (1200, 1612), (100, 50) */
                                    task Pioconfigvar.Mdirectionconfig := PioHwas_Direction_Output;
                                    -- Init uart Tx pin
                                    /* CIF ProcedureCall (1200, 1687), (100, 50) */
                                    call PioHwas_InitPin_Ri(Piovar, Pioconfigvar);
                                    /* CIF Join (1200, 1762), (100, 50) */
                                    join condition_3;
                                /* CIF Answer (1800, 1087), (400, 50) */
                                (False):
                                    -- Is instance equal to 3?
                                    /* CIF Decision (1800, 1087), (400, 50) */
                                    decision Config.Minstance = UartHwas_Instance_3;
                                        /* CIF Answer (1800, 1162), (400, 50) */
                                        (True):
                                            /* CIF Task (1800, 1237), (100, 50) */
                                            task Pioconfigvar.Mportconfig := PioHwas_Port_D;
                                            /* CIF Task (1800, 1312), (100, 50) */
                                            task Pioconfigvar.Mpinconfig := 28;
                                            /* CIF Task (1800, 1387), (100, 50) */
                                            task Pioconfigvar.Mdirectionconfig := PioHwas_Direction_Input;
                                            /* CIF Task (1800, 1462), (100, 50) */
                                            task Pioconfigvar.Mcontrolconfig := PioHwas_Control_PeripheralA;
                                            -- Init uart Rx pin
                                            /* CIF ProcedureCall (1800, 1537), (100, 50) */
                                            call PioHwas_InitPin_Ri(Piovar, Pioconfigvar);
                                            /* CIF Task (1800, 1612), (100, 50) */
                                            task Pioconfigvar.Mpinconfig := 30;
                                            /* CIF Task (1800, 1687), (100, 50) */
                                            task Pioconfigvar.Mdirectionconfig := PioHwas_Direction_Output;
                                            -- Init uart Tx pin
                                            /* CIF ProcedureCall (1800, 1762), (100, 50) */
                                            call PioHwas_InitPin_Ri(Piovar, Pioconfigvar);
                                            /* CIF Join (1800, 1837), (100, 50) */
                                            join condition_4;
                                        /* CIF Answer (2400, 1162), (400, 50) */
                                        (False):
                                            -- Is instance equal to 4?
                                            /* CIF Decision (2400, 1162), (400, 50) */
                                            decision Config.Minstance = UartHwas_Instance_4;
                                                /* CIF Answer (2400, 1237), (400, 50) */
                                                (True):
                                                    /* CIF Task (2400, 1312), (100, 50) */
                                                    task Pioconfigvar.Mportconfig := PioHwas_Port_D;
                                                    /* CIF Task (2400, 1387), (100, 50) */
                                                    task Pioconfigvar.Mpinconfig := 18;
                                                    /* CIF Task (2400, 1462), (100, 50) */
                                                    task Pioconfigvar.Mdirectionconfig := PioHwas_Direction_Input;
                                                    /* CIF Task (2400, 1537), (100, 50) */
                                                    task Pioconfigvar.Mcontrolconfig := PioHwas_Control_PeripheralC;
                                                    -- Init uart Rx pin
                                                    /* CIF ProcedureCall (2400, 1612), (100, 50) */
                                                    call PioHwas_InitPin_Ri(Piovar, Pioconfigvar);
                                                    /* CIF Task (2400, 1687), (100, 50) */
                                                    task Pioconfigvar.Mpinconfig := 19;
                                                    /* CIF Task (2400, 1762), (100, 50) */
                                                    task Pioconfigvar.Mdirectionconfig := PioHwas_Direction_Output;
                                                    -- Init uart Tx pin
                                                    /* CIF ProcedureCall (2400, 1837), (100, 50) */
                                                    call PioHwas_InitPin_Ri(Piovar, Pioconfigvar);
                                                    /* CIF Join (2400, 1912), (100, 50) */
                                                    join condition_5;
                                                /* CIF Answer (3000, 1237), (400, 50) */
                                                (False):
                                                    /* CIF Join (3000, 1312), (100, 50) */
                                                    join condition_5;
                                            enddecision;
                                            /* CIF Label (3600, 1312), (100, 50) */
                                            condition_5:
                                            /* CIF Join (3600, 1387), (100, 50) */
                                            join condition_4;
                                    enddecision;
                                    /* CIF Label (4200, 1237), (100, 50) */
                                    condition_4:
                                    /* CIF Join (4200, 1312), (100, 50) */
                                    join condition_3;
                            enddecision;
                            /* CIF Label (4800, 1162), (100, 50) */
                            condition_3:
                            /* CIF Join (4800, 1237), (100, 50) */
                            join condition_2;
                    enddecision;
                    /* CIF Label (5400, 1087), (100, 50) */
                    condition_2:
                    /* CIF Join (5400, 1162), (100, 50) */
                    join condition_1;
            enddecision;
            /* CIF Label (6000, 1012), (100, 50) */
            condition_1:
    return;
    endprocedure;
    /* CIF Procedure (0, 1200), (800, 50) */
    procedure InitUartContainer;
        /* CIF Start (0, 0), (200, 75) */
        START;
            /* CIF Task (0, 187), (100, 50) */
            task Uartvar.Muartcraddress := 0;
            /* CIF Task (0, 262), (100, 50) */
            task Uartvar.Muartcraddress := Uartvar.Minstanceaddress + 0;
            /* CIF Task (0, 337), (100, 50) */
            task Uartvar.Muartmraddress := 4;
            /* CIF Task (0, 412), (100, 50) */
            task Uartvar.Muartmraddress := Uartvar.Minstanceaddress + Uartvar.Muartmraddress;
            /* CIF Task (0, 487), (100, 50) */
            task Uartvar.Muartieraddress := 8;
            /* CIF Task (0, 562), (100, 50) */
            task Uartvar.Muartieraddress := Uartvar.Minstanceaddress + Uartvar.Muartieraddress;
            /* CIF Task (0, 637), (100, 50) */
            task Uartvar.Muartidraddress := 12;
            /* CIF Task (0, 712), (100, 50) */
            task Uartvar.Muartidraddress := Uartvar.Minstanceaddress + Uartvar.Muartidraddress;
            /* CIF Task (0, 787), (100, 50) */
            task Uartvar.Muartimraddress := 16;
            /* CIF Task (0, 862), (100, 50) */
            task Uartvar.Muartimraddress := Uartvar.Minstanceaddress + Uartvar.Muartimraddress;
            /* CIF Task (0, 937), (100, 50) */
            task Uartvar.Muartsraddress := 20;
            /* CIF Task (0, 1012), (100, 50) */
            task Uartvar.Muartsraddress := Uartvar.Minstanceaddress + Uartvar.Muartsraddress;
            /* CIF Task (0, 1087), (100, 50) */
            task Uartvar.Muartrhraddress := 24;
            /* CIF Task (0, 1162), (100, 50) */
            task Uartvar.Muartrhraddress := Uartvar.Minstanceaddress + Uartvar.Muartrhraddress;
            /* CIF Task (0, 1237), (100, 50) */
            task Uartvar.Muartthraddress := 28;
            /* CIF Task (0, 1312), (100, 50) */
            task Uartvar.Muartthraddress := Uartvar.Minstanceaddress + Uartvar.Muartthraddress;
            /* CIF Task (0, 1387), (100, 50) */
            task Uartvar.Muartbrgraddress := 32;
            /* CIF Task (0, 1462), (100, 50) */
            task Uartvar.Muartbrgraddress := Uartvar.Minstanceaddress + Uartvar.Muartbrgraddress;
    return;
    endprocedure;
    /* CIF Procedure (0, 1275), (800, 50) */
    procedure InitUart;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in Config UartHwasConfig;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            -- Init PMC with definitions of masks and addresses
            /* CIF ProcedureCall (0, 937), (100, 50) */
            call InitPmc;
            -- Set UART instance register address
            -- Is instance equal to 0?
            /* CIF Decision (0, 937), (400, 50) */
            decision Config.Minstance = UartHwas_Instance_0;
                /* CIF Answer (0, 1012), (400, 50) */
                (True):
                    /* CIF Task (0, 1087), (100, 50) */
                    task Uartvar.Minstanceaddress := 1074661376;
                    /* CIF Join (0, 1162), (100, 50) */
                    join condition_1;
                /* CIF Answer (600, 1012), (400, 50) */
                (False):
                    -- Is instance equal to 1?
                    /* CIF Decision (600, 1012), (400, 50) */
                    decision Config.Minstance = UartHwas_Instance_1;
                        /* CIF Answer (600, 1087), (400, 50) */
                        (True):
                            /* CIF Task (600, 1162), (100, 50) */
                            task Uartvar.Minstanceaddress := 1074661888;
                            /* CIF Join (600, 1237), (100, 50) */
                            join condition_2;
                        /* CIF Answer (1200, 1087), (400, 50) */
                        (False):
                            -- Is instance equal to 2?
                            /* CIF Decision (1200, 1087), (400, 50) */
                            decision Config.Minstance = UartHwas_Instance_2;
                                /* CIF Answer (1200, 1162), (400, 50) */
                                (True):
                                    /* CIF Task (1200, 1237), (100, 50) */
                                    task Uartvar.Minstanceaddress := 1074665984;
                                    /* CIF Join (1200, 1312), (100, 50) */
                                    join condition_3;
                                /* CIF Answer (1800, 1162), (400, 50) */
                                (False):
                                    -- Is instance equal to 3?
                                    /* CIF Decision (1800, 1162), (400, 50) */
                                    decision Config.Minstance = UartHwas_Instance_3;
                                        /* CIF Answer (1800, 1237), (400, 50) */
                                        (True):
                                            /* CIF Task (1800, 1312), (100, 50) */
                                            task Uartvar.Minstanceaddress := 1074666496;
                                            /* CIF Join (1800, 1387), (100, 50) */
                                            join condition_4;
                                        /* CIF Answer (2400, 1237), (400, 50) */
                                        (False):
                                            -- Is instance equal to 4?
                                            /* CIF Decision (2400, 1237), (400, 50) */
                                            decision Config.Minstance = UartHwas_Instance_4;
                                                /* CIF Answer (2400, 1312), (400, 50) */
                                                (True):
                                                    /* CIF Task (2400, 1387), (100, 50) */
                                                    task Uartvar.Minstanceaddress := 1074667008;
                                                    /* CIF Join (2400, 1462), (100, 50) */
                                                    join condition_5;
                                                /* CIF Answer (3000, 1312), (400, 50) */
                                                (False):
                                                    /* CIF Join (3000, 1387), (100, 50) */
                                                    join condition_5;
                                            enddecision;
                                            /* CIF Label (3600, 1387), (100, 50) */
                                            condition_5:
                                            /* CIF Join (3600, 1462), (100, 50) */
                                            join condition_4;
                                    enddecision;
                                    /* CIF Label (4200, 1312), (100, 50) */
                                    condition_4:
                                    /* CIF Join (4200, 1387), (100, 50) */
                                    join condition_3;
                            enddecision;
                            /* CIF Label (4800, 1237), (100, 50) */
                            condition_3:
                            /* CIF Join (4800, 1312), (100, 50) */
                            join condition_2;
                    enddecision;
                    /* CIF Label (5400, 1162), (100, 50) */
                    condition_2:
                    /* CIF Join (5400, 1237), (100, 50) */
                    join condition_1;
            enddecision;
            /* CIF Label (6000, 1087), (100, 50) */
            condition_1:
            -- Set the rest of the Pio register addresses
            /* CIF ProcedureCall (6000, 1162), (100, 50) */
            call InitUartContainer;
            -- Init Pmc
            -- Is instance equal to 0?
            /* CIF Decision (6000, 1162), (400, 50) */
            decision Config.Minstance = UartHwas_Instance_0;
                /* CIF Answer (6000, 1237), (400, 50) */
                (True):
                    /* CIF Task (6000, 1312), (100, 50) */
                    task Destinationaddressvar := Pmcvar.Pmc_pcer0_offset;
                    /* CIF Task (6000, 1387), (100, 50) */
                    task Bitsmaskvar := Pmcvar.Pmc_pcxr0_pid7_uart0_mask;
                    /* CIF Task (6000, 1462), (100, 50) */
                    task Bitsvaluevar := Pmcvar.Pmc_pcxr0_pid7_uart0_mask;
                    /* CIF Join (6000, 1537), (100, 50) */
                    join condition_6;
                /* CIF Answer (6600, 1237), (400, 50) */
                (False):
                    -- Is instance equal to 1?
                    /* CIF Decision (6600, 1237), (400, 50) */
                    decision Config.Minstance = UartHwas_Instance_1;
                        /* CIF Answer (6600, 1312), (400, 50) */
                        (True):
                            -- Set destination register to PCER0
                            /* CIF Task (6600, 1387), (100, 50) */
                            task Destinationaddressvar := Pmcvar.Pmc_pcer0_offset;
                            /* CIF Task (6600, 1462), (100, 50) */
                            task Bitsmaskvar := Pmcvar.Pmc_pcxr0_pid8_uart1_mask;
                            /* CIF Task (6600, 1537), (100, 50) */
                            task Bitsvaluevar := Pmcvar.Pmc_pcxr0_pid8_uart1_mask;
                            /* CIF Join (6600, 1612), (100, 50) */
                            join condition_7;
                        /* CIF Answer (7200, 1312), (400, 50) */
                        (False):
                            -- Is instance equal to 2?
                            /* CIF Decision (7200, 1312), (400, 50) */
                            decision Config.Minstance = UartHwas_Instance_2;
                                /* CIF Answer (7200, 1387), (400, 50) */
                                (True):
                                    -- Set destination register to PCER1
                                    /* CIF Task (7200, 1462), (100, 50) */
                                    task Destinationaddressvar := Pmcvar.Pmc_pcer1_offset;
                                    /* CIF Task (7200, 1537), (100, 50) */
                                    task Bitsmaskvar := Pmcvar.Pmc_pcxr1_pid44_uart2_mask;
                                    /* CIF Task (7200, 1612), (100, 50) */
                                    task Bitsvaluevar := Pmcvar.Pmc_pcxr1_pid44_uart2_mask;
                                    /* CIF Join (7200, 1687), (100, 50) */
                                    join condition_8;
                                /* CIF Answer (7800, 1387), (400, 50) */
                                (False):
                                    -- Is instance equal to 3?
                                    /* CIF Decision (7800, 1387), (400, 50) */
                                    decision Config.Minstance = UartHwas_Instance_3;
                                        /* CIF Answer (7800, 1462), (400, 50) */
                                        (True):
                                            -- Set destination register to PCER1
                                            /* CIF Task (7800, 1537), (100, 50) */
                                            task Destinationaddressvar := Pmcvar.Pmc_pcer1_offset;
                                            /* CIF Task (7800, 1612), (100, 50) */
                                            task Bitsmaskvar := Pmcvar.Pmc_pcxr1_pid45_uart3_mask;
                                            /* CIF Task (7800, 1687), (100, 50) */
                                            task Bitsvaluevar := Pmcvar.Pmc_pcxr1_pid45_uart3_mask;
                                            /* CIF Join (7800, 1762), (100, 50) */
                                            join condition_9;
                                        /* CIF Answer (8400, 1462), (400, 50) */
                                        (False):
                                            -- Is instance equal to 4?
                                            /* CIF Decision (8400, 1462), (400, 50) */
                                            decision Config.Minstance = UartHwas_Instance_4;
                                                /* CIF Answer (8400, 1537), (400, 50) */
                                                (True):
                                                    -- Set destination register to PCER1
                                                    /* CIF Task (8400, 1612), (100, 50) */
                                                    task Destinationaddressvar := Pmcvar.Pmc_pcer1_offset;
                                                    /* CIF Task (8400, 1687), (100, 50) */
                                                    task Bitsmaskvar := Pmcvar.Pmc_pcxr1_pid46_uart4_mask;
                                                    /* CIF Task (8400, 1762), (100, 50) */
                                                    task Bitsvaluevar := Pmcvar.Pmc_pcxr1_pid46_uart4_mask;
                                                    /* CIF Join (8400, 1837), (100, 50) */
                                                    join condition_10;
                                                /* CIF Answer (9000, 1537), (400, 50) */
                                                (False):
                                                    /* CIF Join (9000, 1612), (100, 50) */
                                                    join condition_10;
                                            enddecision;
                                            /* CIF Label (9600, 1612), (100, 50) */
                                            condition_10:
                                            /* CIF Join (9600, 1687), (100, 50) */
                                            join condition_9;
                                    enddecision;
                                    /* CIF Label (10200, 1537), (100, 50) */
                                    condition_9:
                                    /* CIF Join (10200, 1612), (100, 50) */
                                    join condition_8;
                            enddecision;
                            /* CIF Label (10800, 1462), (100, 50) */
                            condition_8:
                            /* CIF Join (10800, 1537), (100, 50) */
                            join condition_7;
                    enddecision;
                    /* CIF Label (11400, 1387), (100, 50) */
                    condition_7:
                    /* CIF Join (11400, 1462), (100, 50) */
                    join condition_6;
            enddecision;
            /* CIF Label (12000, 1312), (100, 50) */
            condition_6:
            -- Enable proper UART instance clock
            /* CIF ProcedureCall (12000, 1387), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, Bitsmaskvar, Bitsvaluevar);
            -- Initializes Rx and Tx pins
            /* CIF ProcedureCall (12000, 1462), (100, 50) */
            call InitPio(Configvar);
            /* CIF Task (12000, 1537), (100, 50) */
            task Destinationaddressvar := Uartvar.Muartcraddress;
            -- Enable Rx and Tx
            /* CIF ProcedureCall (12000, 1612), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, 80, 80);
            /* CIF Task (12000, 1687), (100, 50) */
            task Destinationaddressvar := Uartvar.Muartmraddress;
            -- Set no parity mode and clear chmode bits (set normal mode)
            /* CIF ProcedureCall (12000, 1762), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, 51200, 2048);
            /* CIF Task (12000, 1837), (100, 50) */
            task Destinationaddressvar := Uartvar.Muartbrgraddress;
            -- Set baudrate
            -- Is baudrate equal to 9600?
            /* CIF Decision (12000, 1837), (400, 50) */
            decision Config.Mbaudrate = UartHwas_Baudrate9600;
                /* CIF Answer (12000, 1912), (400, 50) */
                (True):
                    /* CIF Task (12000, 1987), (100, 50) */
                    task Bitsmaskvar := 488;
                    /* CIF Task (12000, 2062), (100, 50) */
                    task Bitsvaluevar := 488;
                    /* CIF Join (12000, 2137), (100, 50) */
                    join condition_11;
                /* CIF Answer (12600, 1912), (400, 50) */
                (False):
                    -- Is baudrate equal to 115200?
                    /* CIF Decision (12600, 1912), (400, 50) */
                    decision Config.Mbaudrate = UartHwas_Baudrate115200;
                        /* CIF Answer (12600, 1987), (400, 50) */
                        (True):
                            /* CIF Task (12600, 2062), (100, 50) */
                            task Bitsmaskvar := 40;
                            /* CIF Task (12600, 2137), (100, 50) */
                            task Bitsvaluevar := 40;
                            /* CIF Join (12600, 2212), (100, 50) */
                            join condition_12;
                        /* CIF Answer (13200, 1987), (400, 50) */
                        (False):
                            /* CIF Join (13200, 2062), (100, 50) */
                            join condition_12;
                    enddecision;
                    /* CIF Label (13800, 2062), (100, 50) */
                    condition_12:
                    /* CIF Join (13800, 2137), (100, 50) */
                    join condition_11;
            enddecision;
            /* CIF Label (14400, 1987), (100, 50) */
            condition_11:
            -- Set no parity mode and clear chmode bits (set normal mode)
            /* CIF ProcedureCall (14400, 2062), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, Bitsmaskvar, Bitsvaluevar);
            -- Set UART irq number
            -- Is instance equal to 0?
            /* CIF Decision (14400, 2062), (400, 50) */
            decision Config.Minstance = UartHwas_Instance_0;
                /* CIF Answer (14400, 2137), (400, 50) */
                (True):
                    /* CIF Task (14400, 2212), (100, 50) */
                    task Uartvar.Mirqnumber := 7;
                    /* CIF Join (14400, 2287), (100, 50) */
                    join condition_13;
                /* CIF Answer (15000, 2137), (400, 50) */
                (False):
                    -- Is instance equal to 1?
                    /* CIF Decision (15000, 2137), (400, 50) */
                    decision Config.Minstance = UartHwas_Instance_1;
                        /* CIF Answer (15000, 2212), (400, 50) */
                        (True):
                            /* CIF Task (15000, 2287), (100, 50) */
                            task Uartvar.Mirqnumber := 8;
                            /* CIF Join (15000, 2362), (100, 50) */
                            join condition_14;
                        /* CIF Answer (15600, 2212), (400, 50) */
                        (False):
                            -- Is instance equal to 2?
                            /* CIF Decision (15600, 2212), (400, 50) */
                            decision Config.Minstance = UartHwas_Instance_2;
                                /* CIF Answer (15600, 2287), (400, 50) */
                                (True):
                                    /* CIF Task (15600, 2362), (100, 50) */
                                    task Uartvar.Mirqnumber := 44;
                                    /* CIF Join (15600, 2437), (100, 50) */
                                    join condition_15;
                                /* CIF Answer (16200, 2287), (400, 50) */
                                (False):
                                    -- Is instance equal to 3?
                                    /* CIF Decision (16200, 2287), (400, 50) */
                                    decision Config.Minstance = UartHwas_Instance_3;
                                        /* CIF Answer (16200, 2362), (400, 50) */
                                        (True):
                                            /* CIF Task (16200, 2437), (100, 50) */
                                            task Uartvar.Mirqnumber := 45;
                                            /* CIF Join (16200, 2512), (100, 50) */
                                            join condition_16;
                                        /* CIF Answer (16800, 2362), (400, 50) */
                                        (False):
                                            -- Is instance equal to 4?
                                            /* CIF Decision (16800, 2362), (400, 50) */
                                            decision Config.Minstance = UartHwas_Instance_4;
                                                /* CIF Answer (16800, 2437), (400, 50) */
                                                (True):
                                                    /* CIF Task (16800, 2512), (100, 50) */
                                                    task Uartvar.Mirqnumber := 46;
                                                    /* CIF Join (16800, 2587), (100, 50) */
                                                    join condition_17;
                                                /* CIF Answer (17400, 2437), (400, 50) */
                                                (False):
                                                    /* CIF Join (17400, 2512), (100, 50) */
                                                    join condition_17;
                                            enddecision;
                                            /* CIF Label (18000, 2512), (100, 50) */
                                            condition_17:
                                            /* CIF Join (18000, 2587), (100, 50) */
                                            join condition_16;
                                    enddecision;
                                    /* CIF Label (18600, 2437), (100, 50) */
                                    condition_16:
                                    /* CIF Join (18600, 2512), (100, 50) */
                                    join condition_15;
                            enddecision;
                            /* CIF Label (19200, 2362), (100, 50) */
                            condition_15:
                            /* CIF Join (19200, 2437), (100, 50) */
                            join condition_14;
                    enddecision;
                    /* CIF Label (19800, 2287), (100, 50) */
                    condition_14:
                    /* CIF Join (19800, 2362), (100, 50) */
                    join condition_13;
            enddecision;
            /* CIF Label (20400, 2212), (100, 50) */
            condition_13:
            /* CIF Task (20400, 2287), (100, 50) */
            task Configvar := Config;
            -- Updates spcific local UART variable
            /* CIF ProcedureCall (20400, 2362), (100, 50) */
            call UpdateLocalUart(Uartvar, Configvar);
    return;
    endprocedure;
    /* CIF Procedure (0, 1350), (800, 50) */
    procedure ReadByteAsync;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in Uart UartHwas;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            /* CIF Task (0, 937), (100, 50) */
            task Destinationaddressvar := Uart.Muartieraddress;
            -- Enable Rx ready interrupt
            /* CIF ProcedureCall (0, 1012), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, 1, 1);
            /* CIF Task (0, 1087), (100, 50) */
            task Irqnumbervar := Uartvar.Mirqnumber;
            -- Subscribe to Uart interrupt
            /* CIF ProcedureCall (0, 1162), (100, 50) */
            call InterruptSubscriptionManagement_SubscribeToInterrupt_Ri(Irqnumbervar);
            -- Enable Uart interrupt
            /* CIF ProcedureCall (0, 1237), (100, 50) */
            call InterruptManagement_EnableInterrupt_Ri(Irqnumbervar);
    return;
    endprocedure;
    /* CIF Procedure (0, 1425), (800, 50) */
    procedure SendByteAsync;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in Uart UartHwas,
            in Byte Byte;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            /* CIF Task (0, 937), (100, 50) */
            task Irqnumbervar := Uartvar.Mirqnumber;
            -- Subscribe to Uart interrupt
            /* CIF ProcedureCall (0, 1012), (100, 50) */
            call InterruptSubscriptionManagement_SubscribeToInterrupt_Ri(Irqnumbervar);
            -- Enable Uart interrupt
            /* CIF ProcedureCall (0, 1087), (100, 50) */
            call InterruptManagement_EnableInterrupt_Ri(Irqnumbervar);
            /* CIF Task (0, 1162), (100, 50) */
            task Destinationaddressvar := Uart.Muartthraddress;
            /* CIF Task (0, 1237), (100, 50) */
            task Bitsvaluevar := 0;
            /* CIF Task (0, 1312), (100, 50) */
            task Bitsvaluevar := Byte;
            -- Write byte to Thr 
            /* CIF ProcedureCall (0, 1387), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, 255, Bitsvaluevar);
            -- Assign source address to variable
            /* CIF Task (0, 1462), (100, 50) */
            task Destinationaddressvar := Uart.Muartieraddress;
            -- Enable Tx empty interrupt
            /* CIF ProcedureCall (0, 1537), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, 512, 512);
    return;
    endprocedure;
    /* CIF Procedure (0, 1500), (800, 50) */
    procedure IRQHandler;
        /* CIF Start (0, 0), (200, 75) */
        START;
            /* CIF ProcedureCall (0, 187), (100, 50) */
            call GetLocalUart;
            /* CIF Task (0, 262), (100, 50) */
            task Sourceaddressvar := Uartvar.Muartimraddress;
            -- Read interrupt mask for RXRDY(IMR)
            /* CIF ProcedureCall (0, 337), (100, 50) */
            call RawMemoryAccess_ReadWord_Ri(Sourceaddressvar, 1, Bitsmaskvar);
            /* CIF Task (0, 412), (100, 50) */
            task Sourceaddressvar := Uartvar.Muartsraddress;
            -- Read uartVar status of RXRDY masked taking value from IMR
            /* CIF ProcedureCall (0, 487), (100, 50) */
            call RawMemoryAccess_ReadWord_Ri(Sourceaddressvar, Bitsmaskvar, Bitsvaluevar);
            -- Is RxRDY set in SR and IMR?
            /* CIF Decision (0, 487), (400, 50) */
            decision Bitsvaluevar = 1;
                /* CIF Answer (0, 562), (400, 50) */
                (True):
                    /* CIF Task (0, 637), (100, 50) */
                    task Sourceaddressvar := Uartvar.Muartrhraddress;
                    -- Read interrupt mask for RXRDY(IMR)
                    /* CIF ProcedureCall (0, 712), (100, 50) */
                    call RawMemoryAccess_ReadWord_Ri(Sourceaddressvar, 255, Bitsvaluevar);
                    /* CIF Task (0, 787), (100, 50) */
                    task Bytevar := Bitsvaluevar;
                    /* CIF Task (0, 862), (100, 50) */
                    task Io_uarthwas_readbyteasynccmd_ri.Bytetoread := Bytevar;
                    /* CIF Output (0, 937), (200, 50) */
                    output UartHwas_ReadByteAsyncCmd_Ri(Io_uarthwas_readbyteasynccmd_ri);
                    /* CIF Join (0, 1012), (100, 50) */
                    join condition_1;
                /* CIF Answer (600, 562), (400, 50) */
                (False):
                    /* CIF Join (600, 637), (100, 50) */
                    join condition_1;
            enddecision;
            /* CIF Label (1200, 637), (100, 50) */
            condition_1:
            /* CIF Task (1200, 712), (100, 50) */
            task Sourceaddressvar := Uartvar.Muartimraddress;
            -- Read interrupt mask for TXEMPTY(IMR)
            /* CIF ProcedureCall (1200, 787), (100, 50) */
            call RawMemoryAccess_ReadWord_Ri(Sourceaddressvar, 512, Bitsmaskvar);
            /* CIF Task (1200, 862), (100, 50) */
            task Sourceaddressvar := Uartvar.Muartsraddress;
            -- Read uartVar status of RXRDY masked taking value from IMR
            /* CIF ProcedureCall (1200, 937), (100, 50) */
            call RawMemoryAccess_ReadWord_Ri(Sourceaddressvar, Bitsmaskvar, Bitsvaluevar);
            -- Is TXEMPTY set in SR and IMR?
            /* CIF Decision (1200, 937), (400, 50) */
            decision Bitsvaluevar = 512;
                /* CIF Answer (1200, 1012), (400, 50) */
                (True):
                    /* CIF Task (1200, 1087), (100, 50) */
                    task Destinationaddressvar := Uartvar.Muartidraddress;
                    -- Disable uartVar TXEmpty interrupt
                    /* CIF ProcedureCall (1200, 1162), (100, 50) */
                    call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, 512, 512);
                    /* CIF Task (1200, 1237), (100, 50) */
                    task Io_uarthwas_sendbyteasynccmd_ri.Bytesentflag := 1;
                    -- Notify that byte was received
                    /* CIF Output (1200, 1312), (200, 50) */
                    output UartHwas_SendByteAsyncCmd_Ri(Io_uarthwas_sendbyteasynccmd_ri);
                    /* CIF Join (1200, 1387), (100, 50) */
                    join condition_2;
                /* CIF Answer (1800, 1012), (400, 50) */
                (False):
                    /* CIF Join (1800, 1087), (100, 50) */
                    join condition_2;
            enddecision;
            /* CIF Label (2400, 1087), (100, 50) */
            condition_2:
            /* CIF Task (2400, 1162), (100, 50) */
            task Irqnumbervar := Uartvar.Mirqnumber;
            -- Enable uartVar interrupt
            /* CIF ProcedureCall (2400, 1237), (100, 50) */
            call InterruptManagement_EnableInterrupt_Ri(Irqnumbervar);
    return;
    endprocedure;
    /* CIF Procedure (0, 1575), (800, 50) */
    procedure UartHwas_InitUartCmd_Pi;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in/out Uart UartHwas,
            in Config UartHwasConfig;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            /* CIF Task (0, 937), (100, 50) */
            task Configvar := Config;
            /* CIF ProcedureCall (0, 1012), (100, 50) */
            call InitUart(Configvar);
            /* CIF Task (0, 1087), (100, 50) */
            task Uart := Uartvar;
    return;
    endprocedure;
    /* CIF Start (0, 1650), (200, 75) */
    START;
        /* CIF NextState (0, 1837), (200, 50) */
        NEXTSTATE Off;
    /* CIF State (0, 1912), (200, 50) */
    state Idle;
        /* CIF Input (0, 1912), (200, 50) */
        input UartHwas_ReadByteAsyncCmd_Pi(Io_uarthwas_readbyteasynccmd_pi);
            /* CIF Task (0, 1987), (100, 50) */
            task Uartvar := Io_uarthwas_readbyteasynccmd_pi.Uart;
            /* CIF ProcedureCall (0, 2062), (100, 50) */
            call ReadByteAsync(Uartvar);
            /* CIF NextState (0, 2137), (200, 50) */
            NEXTSTATE Idle;
        /* CIF Input (300, 1912), (200, 50) */
        input UartHwas_SendByteAsyncCmd_Pi(Io_uarthwas_sendbyteasynccmd_pi);
            /* CIF Task (300, 1987), (100, 50) */
            task Uartvar := Io_uarthwas_sendbyteasynccmd_pi.Uart;
            /* CIF Task (300, 2062), (100, 50) */
            task Bitsvaluevar := Io_uarthwas_sendbyteasynccmd_pi.Bytetosend;
            /* CIF ProcedureCall (300, 2137), (100, 50) */
            call SendByteAsync(Uartvar, Bitsvaluevar);
            /* CIF NextState (300, 2212), (200, 50) */
            NEXTSTATE Idle;
        /* CIF Input (600, 1912), (200, 50) */
        input InterruptSubscription_Interrupt_Pi(Io_interruptsubscription_interrupt_pi);
            /* CIF Task (600, 1987), (100, 50) */
            task Irqnumbervar := Io_interruptsubscription_interrupt_pi.Interrupt;
            /* CIF ProcedureCall (600, 2062), (100, 50) */
            call IRQHandler;
            /* CIF NextState (600, 2137), (200, 50) */
            NEXTSTATE Idle;
    endstate;
    /* CIF State (1200, 1912), (200, 50) */
    state Off;
        /* CIF Input (1200, 1912), (200, 50) */
        input UartHwas_InitUartCmd_Pi;
            /* CIF NextState (1200, 1987), (200, 50) */
            NEXTSTATE Idle;
    endstate;
endprocess UartHwasDriver;
