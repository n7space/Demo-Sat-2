#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint asn1SccDestinationAddress;


flag asn1SccDestinationAddress_Equal(const asn1SccDestinationAddress* pVal1, const asn1SccDestinationAddress* pVal2);

void asn1SccDestinationAddress_Initialize(asn1SccDestinationAddress* pVal);

#define ERR_DESTINATIONADDRESS		1  /**/
flag asn1SccDestinationAddress_IsConstraintValid(const asn1SccDestinationAddress* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DESTINATIONADDRESS		2  /**/
#define asn1SccDestinationAddress_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDestinationAddress_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDestinationAddress_Encode(const asn1SccDestinationAddress* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DESTINATIONADDRESS		3  /**/
flag asn1SccDestinationAddress_Decode(asn1SccDestinationAddress* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DESTINATIONADDRESS		4  /**/
#define asn1SccDestinationAddress_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccDestinationAddress_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccDestinationAddress_ACN_Encode(const asn1SccDestinationAddress* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DESTINATIONADDRESS		5  /**/
flag asn1SccDestinationAddress_ACN_Decode(asn1SccDestinationAddress* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccSourceAddress;


flag asn1SccSourceAddress_Equal(const asn1SccSourceAddress* pVal1, const asn1SccSourceAddress* pVal2);

void asn1SccSourceAddress_Initialize(asn1SccSourceAddress* pVal);

#define ERR_SOURCEADDRESS		6  /**/
flag asn1SccSourceAddress_IsConstraintValid(const asn1SccSourceAddress* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SOURCEADDRESS		7  /**/
#define asn1SccSourceAddress_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccSourceAddress_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccSourceAddress_Encode(const asn1SccSourceAddress* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SOURCEADDRESS		8  /**/
flag asn1SccSourceAddress_Decode(asn1SccSourceAddress* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SOURCEADDRESS		9  /**/
#define asn1SccSourceAddress_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccSourceAddress_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccSourceAddress_ACN_Encode(const asn1SccSourceAddress* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SOURCEADDRESS		10  /**/
flag asn1SccSourceAddress_ACN_Decode(asn1SccSourceAddress* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccWord;


flag asn1SccWord_Equal(const asn1SccWord* pVal1, const asn1SccWord* pVal2);

void asn1SccWord_Initialize(asn1SccWord* pVal);

#define ERR_WORD		11  /**/
flag asn1SccWord_IsConstraintValid(const asn1SccWord* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WORD		12  /**/
#define asn1SccWord_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccWord_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccWord_Encode(const asn1SccWord* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WORD		13  /**/
flag asn1SccWord_Decode(asn1SccWord* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WORD		14  /**/
#define asn1SccWord_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccWord_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccWord_ACN_Encode(const asn1SccWord* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WORD		15  /**/
flag asn1SccWord_ACN_Decode(asn1SccWord* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccWordMask;


flag asn1SccWordMask_Equal(const asn1SccWordMask* pVal1, const asn1SccWordMask* pVal2);

void asn1SccWordMask_Initialize(asn1SccWordMask* pVal);

#define ERR_WORDMASK		16  /**/
flag asn1SccWordMask_IsConstraintValid(const asn1SccWordMask* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WORDMASK		17  /**/
#define asn1SccWordMask_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccWordMask_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccWordMask_Encode(const asn1SccWordMask* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WORDMASK		18  /**/
flag asn1SccWordMask_Decode(asn1SccWordMask* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WORDMASK		19  /**/
#define asn1SccWordMask_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccWordMask_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccWordMask_ACN_Encode(const asn1SccWordMask* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WORDMASK		20  /**/
flag asn1SccWordMask_ACN_Decode(asn1SccWordMask* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccPioHwas --------------------------------------------*/
typedef asn1SccDestinationAddress asn1SccPioHwas_mPortAddress;

typedef asn1SccWordMask asn1SccPioHwas_mPin;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortPerAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortOerAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortOdrAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortIfdrAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortSodrAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortCodrAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortMddrAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortPudrAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortOwerAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortOwdrAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortIfscdrAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortPpddrAddress;

typedef asn1SccDestinationAddress asn1SccPioHwas_mPortSchmittAddress;

typedef struct {
    asn1SccPioHwas_mPortAddress mPortAddress;
    asn1SccPioHwas_mPin mPin;
    asn1SccPioHwas_mPortPerAddress mPortPerAddress;
    asn1SccPioHwas_mPortOerAddress mPortOerAddress;
    asn1SccPioHwas_mPortOdrAddress mPortOdrAddress;
    asn1SccPioHwas_mPortIfdrAddress mPortIfdrAddress;
    asn1SccPioHwas_mPortSodrAddress mPortSodrAddress;
    asn1SccPioHwas_mPortCodrAddress mPortCodrAddress;
    asn1SccPioHwas_mPortMddrAddress mPortMddrAddress;
    asn1SccPioHwas_mPortPudrAddress mPortPudrAddress;
    asn1SccPioHwas_mPortOwerAddress mPortOwerAddress;
    asn1SccPioHwas_mPortOwdrAddress mPortOwdrAddress;
    asn1SccPioHwas_mPortIfscdrAddress mPortIfscdrAddress;
    asn1SccPioHwas_mPortPpddrAddress mPortPpddrAddress;
    asn1SccPioHwas_mPortSchmittAddress mPortSchmittAddress;

} asn1SccPioHwas;

flag asn1SccPioHwas_mPortAddress_Equal(const asn1SccPioHwas_mPortAddress* pVal1, const asn1SccPioHwas_mPortAddress* pVal2);

flag asn1SccPioHwas_mPin_Equal(const asn1SccPioHwas_mPin* pVal1, const asn1SccPioHwas_mPin* pVal2);

flag asn1SccPioHwas_mPortPerAddress_Equal(const asn1SccPioHwas_mPortPerAddress* pVal1, const asn1SccPioHwas_mPortPerAddress* pVal2);

flag asn1SccPioHwas_mPortOerAddress_Equal(const asn1SccPioHwas_mPortOerAddress* pVal1, const asn1SccPioHwas_mPortOerAddress* pVal2);

flag asn1SccPioHwas_mPortOdrAddress_Equal(const asn1SccPioHwas_mPortOdrAddress* pVal1, const asn1SccPioHwas_mPortOdrAddress* pVal2);

flag asn1SccPioHwas_mPortIfdrAddress_Equal(const asn1SccPioHwas_mPortIfdrAddress* pVal1, const asn1SccPioHwas_mPortIfdrAddress* pVal2);

flag asn1SccPioHwas_mPortSodrAddress_Equal(const asn1SccPioHwas_mPortSodrAddress* pVal1, const asn1SccPioHwas_mPortSodrAddress* pVal2);

flag asn1SccPioHwas_mPortCodrAddress_Equal(const asn1SccPioHwas_mPortCodrAddress* pVal1, const asn1SccPioHwas_mPortCodrAddress* pVal2);

flag asn1SccPioHwas_mPortMddrAddress_Equal(const asn1SccPioHwas_mPortMddrAddress* pVal1, const asn1SccPioHwas_mPortMddrAddress* pVal2);

flag asn1SccPioHwas_mPortPudrAddress_Equal(const asn1SccPioHwas_mPortPudrAddress* pVal1, const asn1SccPioHwas_mPortPudrAddress* pVal2);

flag asn1SccPioHwas_mPortOwerAddress_Equal(const asn1SccPioHwas_mPortOwerAddress* pVal1, const asn1SccPioHwas_mPortOwerAddress* pVal2);

flag asn1SccPioHwas_mPortOwdrAddress_Equal(const asn1SccPioHwas_mPortOwdrAddress* pVal1, const asn1SccPioHwas_mPortOwdrAddress* pVal2);

flag asn1SccPioHwas_mPortIfscdrAddress_Equal(const asn1SccPioHwas_mPortIfscdrAddress* pVal1, const asn1SccPioHwas_mPortIfscdrAddress* pVal2);

flag asn1SccPioHwas_mPortPpddrAddress_Equal(const asn1SccPioHwas_mPortPpddrAddress* pVal1, const asn1SccPioHwas_mPortPpddrAddress* pVal2);

flag asn1SccPioHwas_mPortSchmittAddress_Equal(const asn1SccPioHwas_mPortSchmittAddress* pVal1, const asn1SccPioHwas_mPortSchmittAddress* pVal2);

flag asn1SccPioHwas_Equal(const asn1SccPioHwas* pVal1, const asn1SccPioHwas* pVal2);

void asn1SccPioHwas_mPortAddress_Initialize(asn1SccPioHwas_mPortAddress* pVal);
void asn1SccPioHwas_mPin_Initialize(asn1SccPioHwas_mPin* pVal);
void asn1SccPioHwas_mPortPerAddress_Initialize(asn1SccPioHwas_mPortPerAddress* pVal);
void asn1SccPioHwas_mPortOerAddress_Initialize(asn1SccPioHwas_mPortOerAddress* pVal);
void asn1SccPioHwas_mPortOdrAddress_Initialize(asn1SccPioHwas_mPortOdrAddress* pVal);
void asn1SccPioHwas_mPortIfdrAddress_Initialize(asn1SccPioHwas_mPortIfdrAddress* pVal);
void asn1SccPioHwas_mPortSodrAddress_Initialize(asn1SccPioHwas_mPortSodrAddress* pVal);
void asn1SccPioHwas_mPortCodrAddress_Initialize(asn1SccPioHwas_mPortCodrAddress* pVal);
void asn1SccPioHwas_mPortMddrAddress_Initialize(asn1SccPioHwas_mPortMddrAddress* pVal);
void asn1SccPioHwas_mPortPudrAddress_Initialize(asn1SccPioHwas_mPortPudrAddress* pVal);
void asn1SccPioHwas_mPortOwerAddress_Initialize(asn1SccPioHwas_mPortOwerAddress* pVal);
void asn1SccPioHwas_mPortOwdrAddress_Initialize(asn1SccPioHwas_mPortOwdrAddress* pVal);
void asn1SccPioHwas_mPortIfscdrAddress_Initialize(asn1SccPioHwas_mPortIfscdrAddress* pVal);
void asn1SccPioHwas_mPortPpddrAddress_Initialize(asn1SccPioHwas_mPortPpddrAddress* pVal);
void asn1SccPioHwas_mPortSchmittAddress_Initialize(asn1SccPioHwas_mPortSchmittAddress* pVal);
void asn1SccPioHwas_Initialize(asn1SccPioHwas* pVal);

#define ERR_PIOHWAS		136  /**/
#define ERR_PIOHWAS_MPORTADDRESS		61  /**/
#define ERR_PIOHWAS_MPIN		66  /**/
#define ERR_PIOHWAS_MPORTPERADDRESS		71  /**/
#define ERR_PIOHWAS_MPORTOERADDRESS		76  /**/
#define ERR_PIOHWAS_MPORTODRADDRESS		81  /**/
#define ERR_PIOHWAS_MPORTIFDRADDRESS		86  /**/
#define ERR_PIOHWAS_MPORTSODRADDRESS		91  /**/
#define ERR_PIOHWAS_MPORTCODRADDRESS		96  /**/
#define ERR_PIOHWAS_MPORTMDDRADDRESS		101  /**/
#define ERR_PIOHWAS_MPORTPUDRADDRESS		106  /**/
#define ERR_PIOHWAS_MPORTOWERADDRESS		111  /**/
#define ERR_PIOHWAS_MPORTOWDRADDRESS		116  /**/
#define ERR_PIOHWAS_MPORTIFSCDRADDRESS		121  /**/
#define ERR_PIOHWAS_MPORTPPDDRADDRESS		126  /**/
#define ERR_PIOHWAS_MPORTSCHMITTADDRESS		131  /**/
flag asn1SccPioHwas_IsConstraintValid(const asn1SccPioHwas* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PIOHWAS		137  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTADDRESS		62  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPIN		67  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTPERADDRESS		72  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTOERADDRESS		77  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTODRADDRESS		82  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTIFDRADDRESS		87  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTSODRADDRESS		92  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTCODRADDRESS		97  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTMDDRADDRESS		102  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTPUDRADDRESS		107  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTOWERADDRESS		112  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTOWDRADDRESS		117  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTIFSCDRADDRESS		122  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTPPDDRADDRESS		127  /**/
#define ERR_UPER_ENCODE_PIOHWAS_MPORTSCHMITTADDRESS		132  /**/
#define asn1SccPioHwas_REQUIRED_BYTES_FOR_ENCODING       60 
#define asn1SccPioHwas_REQUIRED_BITS_FOR_ENCODING        480

flag asn1SccPioHwas_Encode(const asn1SccPioHwas* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PIOHWAS		138  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTADDRESS		63  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPIN		68  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTPERADDRESS		73  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTOERADDRESS		78  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTODRADDRESS		83  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTIFDRADDRESS		88  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTSODRADDRESS		93  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTCODRADDRESS		98  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTMDDRADDRESS		103  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTPUDRADDRESS		108  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTOWERADDRESS		113  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTOWDRADDRESS		118  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTIFSCDRADDRESS		123  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTPPDDRADDRESS		128  /**/
#define ERR_UPER_DECODE_PIOHWAS_MPORTSCHMITTADDRESS		133  /**/
flag asn1SccPioHwas_Decode(asn1SccPioHwas* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PIOHWAS		139  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTADDRESS		64  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPIN		69  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTPERADDRESS		74  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTOERADDRESS		79  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTODRADDRESS		84  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTIFDRADDRESS		89  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTSODRADDRESS		94  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTCODRADDRESS		99  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTMDDRADDRESS		104  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTPUDRADDRESS		109  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTOWERADDRESS		114  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTOWDRADDRESS		119  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTIFSCDRADDRESS		124  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTPPDDRADDRESS		129  /**/
#define ERR_ACN_ENCODE_PIOHWAS_MPORTSCHMITTADDRESS		134  /**/
#define asn1SccPioHwas_REQUIRED_BYTES_FOR_ACN_ENCODING       60 
#define asn1SccPioHwas_REQUIRED_BITS_FOR_ACN_ENCODING        480

flag asn1SccPioHwas_ACN_Encode(const asn1SccPioHwas* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PIOHWAS		140  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTADDRESS		65  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPIN		70  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTPERADDRESS		75  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTOERADDRESS		80  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTODRADDRESS		85  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTIFDRADDRESS		90  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTSODRADDRESS		95  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTCODRADDRESS		100  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTMDDRADDRESS		105  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTPUDRADDRESS		110  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTOWERADDRESS		115  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTOWDRADDRESS		120  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTIFSCDRADDRESS		125  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTPPDDRADDRESS		130  /**/
#define ERR_ACN_DECODE_PIOHWAS_MPORTSCHMITTADDRESS		135  /**/
flag asn1SccPioHwas_ACN_Decode(asn1SccPioHwas* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccPmcHwas --------------------------------------------*/
typedef asn1SccDestinationAddress asn1SccPmcHwas_pMC_PCSR0_OFFSET;

typedef asn1SccWordMask asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK;

typedef asn1SccWordMask asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK;

typedef asn1SccWordMask asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK;

typedef asn1SccWordMask asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK;

typedef asn1SccWordMask asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK;

typedef struct {
    asn1SccPmcHwas_pMC_PCSR0_OFFSET pMC_PCSR0_OFFSET;
    asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK pMC_PCxR0_PID10_PIOA_MASK;
    asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK pMC_PCxR0_PID11_PIOB_MASK;
    asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK pMC_PCxR0_PID12_PIOC_MASK;
    asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK pMC_PCxR0_PID16_PIOD_MASK;
    asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK pMC_PCxR0_PID17_PIOE_MASK;

} asn1SccPmcHwas;

flag asn1SccPmcHwas_pMC_PCSR0_OFFSET_Equal(const asn1SccPmcHwas_pMC_PCSR0_OFFSET* pVal1, const asn1SccPmcHwas_pMC_PCSR0_OFFSET* pVal2);

flag asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK_Equal(const asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK* pVal1, const asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK* pVal2);

flag asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK_Equal(const asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK* pVal1, const asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK* pVal2);

flag asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK_Equal(const asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK* pVal1, const asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK* pVal2);

flag asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK_Equal(const asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK* pVal1, const asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK* pVal2);

flag asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK_Equal(const asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK* pVal1, const asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK* pVal2);

flag asn1SccPmcHwas_Equal(const asn1SccPmcHwas* pVal1, const asn1SccPmcHwas* pVal2);

void asn1SccPmcHwas_pMC_PCSR0_OFFSET_Initialize(asn1SccPmcHwas_pMC_PCSR0_OFFSET* pVal);
void asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK_Initialize(asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK* pVal);
void asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK_Initialize(asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK* pVal);
void asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK_Initialize(asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK* pVal);
void asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK_Initialize(asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK* pVal);
void asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK_Initialize(asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK* pVal);
void asn1SccPmcHwas_Initialize(asn1SccPmcHwas* pVal);

#define ERR_PMCHWAS		201  /**/
#define ERR_PMCHWAS_PMC_PCSR0_OFFSET		171  /**/
#define ERR_PMCHWAS_PMC_PCXR0_PID10_PIOA_MASK		176  /**/
#define ERR_PMCHWAS_PMC_PCXR0_PID11_PIOB_MASK		181  /**/
#define ERR_PMCHWAS_PMC_PCXR0_PID12_PIOC_MASK		186  /**/
#define ERR_PMCHWAS_PMC_PCXR0_PID16_PIOD_MASK		191  /**/
#define ERR_PMCHWAS_PMC_PCXR0_PID17_PIOE_MASK		196  /**/
flag asn1SccPmcHwas_IsConstraintValid(const asn1SccPmcHwas* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PMCHWAS		202  /**/
#define ERR_UPER_ENCODE_PMCHWAS_PMC_PCSR0_OFFSET		172  /**/
#define ERR_UPER_ENCODE_PMCHWAS_PMC_PCXR0_PID10_PIOA_MASK		177  /**/
#define ERR_UPER_ENCODE_PMCHWAS_PMC_PCXR0_PID11_PIOB_MASK		182  /**/
#define ERR_UPER_ENCODE_PMCHWAS_PMC_PCXR0_PID12_PIOC_MASK		187  /**/
#define ERR_UPER_ENCODE_PMCHWAS_PMC_PCXR0_PID16_PIOD_MASK		192  /**/
#define ERR_UPER_ENCODE_PMCHWAS_PMC_PCXR0_PID17_PIOE_MASK		197  /**/
#define asn1SccPmcHwas_REQUIRED_BYTES_FOR_ENCODING       24 
#define asn1SccPmcHwas_REQUIRED_BITS_FOR_ENCODING        192

flag asn1SccPmcHwas_Encode(const asn1SccPmcHwas* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PMCHWAS		203  /**/
#define ERR_UPER_DECODE_PMCHWAS_PMC_PCSR0_OFFSET		173  /**/
#define ERR_UPER_DECODE_PMCHWAS_PMC_PCXR0_PID10_PIOA_MASK		178  /**/
#define ERR_UPER_DECODE_PMCHWAS_PMC_PCXR0_PID11_PIOB_MASK		183  /**/
#define ERR_UPER_DECODE_PMCHWAS_PMC_PCXR0_PID12_PIOC_MASK		188  /**/
#define ERR_UPER_DECODE_PMCHWAS_PMC_PCXR0_PID16_PIOD_MASK		193  /**/
#define ERR_UPER_DECODE_PMCHWAS_PMC_PCXR0_PID17_PIOE_MASK		198  /**/
flag asn1SccPmcHwas_Decode(asn1SccPmcHwas* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PMCHWAS		204  /**/
#define ERR_ACN_ENCODE_PMCHWAS_PMC_PCSR0_OFFSET		174  /**/
#define ERR_ACN_ENCODE_PMCHWAS_PMC_PCXR0_PID10_PIOA_MASK		179  /**/
#define ERR_ACN_ENCODE_PMCHWAS_PMC_PCXR0_PID11_PIOB_MASK		184  /**/
#define ERR_ACN_ENCODE_PMCHWAS_PMC_PCXR0_PID12_PIOC_MASK		189  /**/
#define ERR_ACN_ENCODE_PMCHWAS_PMC_PCXR0_PID16_PIOD_MASK		194  /**/
#define ERR_ACN_ENCODE_PMCHWAS_PMC_PCXR0_PID17_PIOE_MASK		199  /**/
#define asn1SccPmcHwas_REQUIRED_BYTES_FOR_ACN_ENCODING       24 
#define asn1SccPmcHwas_REQUIRED_BITS_FOR_ACN_ENCODING        192

flag asn1SccPmcHwas_ACN_Encode(const asn1SccPmcHwas* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PMCHWAS		205  /**/
#define ERR_ACN_DECODE_PMCHWAS_PMC_PCSR0_OFFSET		175  /**/
#define ERR_ACN_DECODE_PMCHWAS_PMC_PCXR0_PID10_PIOA_MASK		180  /**/
#define ERR_ACN_DECODE_PMCHWAS_PMC_PCXR0_PID11_PIOB_MASK		185  /**/
#define ERR_ACN_DECODE_PMCHWAS_PMC_PCXR0_PID12_PIOC_MASK		190  /**/
#define ERR_ACN_DECODE_PMCHWAS_PMC_PCXR0_PID16_PIOD_MASK		195  /**/
#define ERR_ACN_DECODE_PMCHWAS_PMC_PCXR0_PID17_PIOE_MASK		200  /**/
flag asn1SccPmcHwas_ACN_Decode(asn1SccPmcHwas* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccBufferSize;


flag asn1SccBufferSize_Equal(const asn1SccBufferSize* pVal1, const asn1SccBufferSize* pVal2);

void asn1SccBufferSize_Initialize(asn1SccBufferSize* pVal);

#define ERR_BUFFERSIZE		21  /**/
flag asn1SccBufferSize_IsConstraintValid(const asn1SccBufferSize* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BUFFERSIZE		22  /**/
#define asn1SccBufferSize_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccBufferSize_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccBufferSize_Encode(const asn1SccBufferSize* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BUFFERSIZE		23  /**/
flag asn1SccBufferSize_Decode(asn1SccBufferSize* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BUFFERSIZE		24  /**/
#define asn1SccBufferSize_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccBufferSize_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag asn1SccBufferSize_ACN_Encode(const asn1SccBufferSize* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BUFFERSIZE		25  /**/
flag asn1SccBufferSize_ACN_Decode(asn1SccBufferSize* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccInterruptNumber;


flag asn1SccInterruptNumber_Equal(const asn1SccInterruptNumber* pVal1, const asn1SccInterruptNumber* pVal2);

void asn1SccInterruptNumber_Initialize(asn1SccInterruptNumber* pVal);

#define ERR_INTERRUPTNUMBER		26  /**/
flag asn1SccInterruptNumber_IsConstraintValid(const asn1SccInterruptNumber* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_INTERRUPTNUMBER		27  /**/
#define asn1SccInterruptNumber_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccInterruptNumber_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccInterruptNumber_Encode(const asn1SccInterruptNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_INTERRUPTNUMBER		28  /**/
flag asn1SccInterruptNumber_Decode(asn1SccInterruptNumber* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_INTERRUPTNUMBER		29  /**/
#define asn1SccInterruptNumber_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccInterruptNumber_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccInterruptNumber_ACN_Encode(const asn1SccInterruptNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_INTERRUPTNUMBER		30  /**/
flag asn1SccInterruptNumber_ACN_Decode(asn1SccInterruptNumber* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccByte;


flag asn1SccByte_Equal(const asn1SccByte* pVal1, const asn1SccByte* pVal2);

void asn1SccByte_Initialize(asn1SccByte* pVal);

#define ERR_BYTE		31  /**/
flag asn1SccByte_IsConstraintValid(const asn1SccByte* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BYTE		32  /**/
#define asn1SccByte_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccByte_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccByte_Encode(const asn1SccByte* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BYTE		33  /**/
flag asn1SccByte_Decode(asn1SccByte* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BYTE		34  /**/
#define asn1SccByte_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccByte_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccByte_ACN_Encode(const asn1SccByte* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BYTE		35  /**/
flag asn1SccByte_ACN_Decode(asn1SccByte* pVal, BitStream* pBitStrm, int* pErrCode);

typedef asn1SccByte asn1SccByteBuffer_elem;


typedef struct {
    int nCount; 
    
    asn1SccByteBuffer_elem arr[65535];
} asn1SccByteBuffer;

flag asn1SccByteBuffer_elem_Equal(const asn1SccByteBuffer_elem* pVal1, const asn1SccByteBuffer_elem* pVal2);

flag asn1SccByteBuffer_Equal(const asn1SccByteBuffer* pVal1, const asn1SccByteBuffer* pVal2);

void asn1SccByteBuffer_elem_Initialize(asn1SccByteBuffer_elem* pVal);
void asn1SccByteBuffer_Initialize(asn1SccByteBuffer* pVal);

#define ERR_BYTEBUFFER		41  /**/
#define ERR_BYTEBUFFER_ELM		36  /**/
flag asn1SccByteBuffer_IsConstraintValid(const asn1SccByteBuffer* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BYTEBUFFER		42  /**/
#define ERR_UPER_ENCODE_BYTEBUFFER_ELM		37  /**/
#define asn1SccByteBuffer_REQUIRED_BYTES_FOR_ENCODING       65537 
#define asn1SccByteBuffer_REQUIRED_BITS_FOR_ENCODING        524296

flag asn1SccByteBuffer_Encode(const asn1SccByteBuffer* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BYTEBUFFER		43  /**/
#define ERR_UPER_DECODE_BYTEBUFFER_ELM		38  /**/
flag asn1SccByteBuffer_Decode(asn1SccByteBuffer* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BYTEBUFFER		44  /**/
#define ERR_ACN_ENCODE_BYTEBUFFER_ELM		39  /**/
#define asn1SccByteBuffer_REQUIRED_BYTES_FOR_ACN_ENCODING       65537 
#define asn1SccByteBuffer_REQUIRED_BITS_FOR_ACN_ENCODING        524296

flag asn1SccByteBuffer_ACN_Encode(const asn1SccByteBuffer* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BYTEBUFFER		45  /**/
#define ERR_ACN_DECODE_BYTEBUFFER_ELM		40  /**/
flag asn1SccByteBuffer_ACN_Decode(asn1SccByteBuffer* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccPinNumber;


flag asn1SccPinNumber_Equal(const asn1SccPinNumber* pVal1, const asn1SccPinNumber* pVal2);

void asn1SccPinNumber_Initialize(asn1SccPinNumber* pVal);

#define ERR_PINNUMBER		46  /**/
flag asn1SccPinNumber_IsConstraintValid(const asn1SccPinNumber* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PINNUMBER		47  /**/
#define asn1SccPinNumber_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPinNumber_REQUIRED_BITS_FOR_ENCODING        7

flag asn1SccPinNumber_Encode(const asn1SccPinNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PINNUMBER		48  /**/
flag asn1SccPinNumber_Decode(asn1SccPinNumber* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PINNUMBER		49  /**/
#define asn1SccPinNumber_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccPinNumber_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag asn1SccPinNumber_ACN_Encode(const asn1SccPinNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PINNUMBER		50  /**/
flag asn1SccPinNumber_ACN_Decode(asn1SccPinNumber* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1SccpioHwas_Port_A = 0,
    asn1SccpioHwas_Port_B = 1,
    asn1SccpioHwas_Port_C = 2,
    asn1SccpioHwas_Port_D = 3,
    asn1SccpioHwas_Port_E = 4
} asn1SccPioHwas_Port;

// please use the following macros to avoid breaking code.
#define asn1SccPioHwas_Port_pioHwas_Port_A asn1SccpioHwas_Port_A
#define asn1SccPioHwas_Port_pioHwas_Port_B asn1SccpioHwas_Port_B
#define asn1SccPioHwas_Port_pioHwas_Port_C asn1SccpioHwas_Port_C
#define asn1SccPioHwas_Port_pioHwas_Port_D asn1SccpioHwas_Port_D
#define asn1SccPioHwas_Port_pioHwas_Port_E asn1SccpioHwas_Port_E

flag asn1SccPioHwas_Port_Equal(const asn1SccPioHwas_Port* pVal1, const asn1SccPioHwas_Port* pVal2);

void asn1SccPioHwas_Port_Initialize(asn1SccPioHwas_Port* pVal);

#define ERR_PIOHWAS_PORT		51  /**/
flag asn1SccPioHwas_Port_IsConstraintValid(const asn1SccPioHwas_Port* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PIOHWAS_PORT		52  /**/
#define asn1SccPioHwas_Port_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPioHwas_Port_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPioHwas_Port_Encode(const asn1SccPioHwas_Port* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PIOHWAS_PORT		53  /**/
flag asn1SccPioHwas_Port_Decode(asn1SccPioHwas_Port* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PIOHWAS_PORT		54  /**/
#define asn1SccPioHwas_Port_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccPioHwas_Port_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccPioHwas_Port_ACN_Encode(const asn1SccPioHwas_Port* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PIOHWAS_PORT		55  /**/
flag asn1SccPioHwas_Port_ACN_Decode(asn1SccPioHwas_Port* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1SccpioHwas_Direction_Input = 0,
    asn1SccpioHwas_Direction_Output = 1
} asn1SccPioHwas_Direction;

// please use the following macros to avoid breaking code.
#define asn1SccPioHwas_Direction_pioHwas_Direction_Input asn1SccpioHwas_Direction_Input
#define asn1SccPioHwas_Direction_pioHwas_Direction_Output asn1SccpioHwas_Direction_Output

flag asn1SccPioHwas_Direction_Equal(const asn1SccPioHwas_Direction* pVal1, const asn1SccPioHwas_Direction* pVal2);

void asn1SccPioHwas_Direction_Initialize(asn1SccPioHwas_Direction* pVal);

#define ERR_PIOHWAS_DIRECTION		56  /**/
flag asn1SccPioHwas_Direction_IsConstraintValid(const asn1SccPioHwas_Direction* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PIOHWAS_DIRECTION		57  /**/
#define asn1SccPioHwas_Direction_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPioHwas_Direction_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccPioHwas_Direction_Encode(const asn1SccPioHwas_Direction* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PIOHWAS_DIRECTION		58  /**/
flag asn1SccPioHwas_Direction_Decode(asn1SccPioHwas_Direction* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PIOHWAS_DIRECTION		59  /**/
#define asn1SccPioHwas_Direction_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccPioHwas_Direction_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccPioHwas_Direction_ACN_Encode(const asn1SccPioHwas_Direction* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PIOHWAS_DIRECTION		60  /**/
flag asn1SccPioHwas_Direction_ACN_Decode(asn1SccPioHwas_Direction* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccPioHwasPinConfig --------------------------------------------*/
typedef asn1SccWordMask asn1SccPioHwasPinConfig_mPinConfig;

typedef struct {
    asn1SccPioHwas_Port mPortConfig;
    asn1SccPioHwasPinConfig_mPinConfig mPinConfig;
    asn1SccPioHwas_Direction mDirectionConfig;

} asn1SccPioHwasPinConfig;

flag asn1SccPioHwasPinConfig_mPinConfig_Equal(const asn1SccPioHwasPinConfig_mPinConfig* pVal1, const asn1SccPioHwasPinConfig_mPinConfig* pVal2);

flag asn1SccPioHwasPinConfig_Equal(const asn1SccPioHwasPinConfig* pVal1, const asn1SccPioHwasPinConfig* pVal2);

void asn1SccPioHwasPinConfig_mPinConfig_Initialize(asn1SccPioHwasPinConfig_mPinConfig* pVal);
void asn1SccPioHwasPinConfig_Initialize(asn1SccPioHwasPinConfig* pVal);

#define ERR_PIOHWASPINCONFIG		166  /**/
#define ERR_PIOHWASPINCONFIG_MPORTCONFIG_2		146  /**/
#define ERR_PIOHWASPINCONFIG_MPINCONFIG		151  /**/
#define ERR_PIOHWASPINCONFIG_MDIRECTIONCONFIG_2		161  /**/
flag asn1SccPioHwasPinConfig_IsConstraintValid(const asn1SccPioHwasPinConfig* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PIOHWASPINCONFIG		167  /**/
#define ERR_UPER_ENCODE_PIOHWASPINCONFIG_MPORTCONFIG_2		147  /**/
#define ERR_UPER_ENCODE_PIOHWASPINCONFIG_MPINCONFIG		152  /**/
#define ERR_UPER_ENCODE_PIOHWASPINCONFIG_MDIRECTIONCONFIG_2		162  /**/
#define asn1SccPioHwasPinConfig_REQUIRED_BYTES_FOR_ENCODING       5 
#define asn1SccPioHwasPinConfig_REQUIRED_BITS_FOR_ENCODING        36

flag asn1SccPioHwasPinConfig_Encode(const asn1SccPioHwasPinConfig* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PIOHWASPINCONFIG		168  /**/
#define ERR_UPER_DECODE_PIOHWASPINCONFIG_MPORTCONFIG_2		148  /**/
#define ERR_UPER_DECODE_PIOHWASPINCONFIG_MPINCONFIG		153  /**/
#define ERR_UPER_DECODE_PIOHWASPINCONFIG_MDIRECTIONCONFIG_2		163  /**/
flag asn1SccPioHwasPinConfig_Decode(asn1SccPioHwasPinConfig* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PIOHWASPINCONFIG		169  /**/
#define ERR_ACN_ENCODE_PIOHWASPINCONFIG_MPORTCONFIG_2		149  /**/
#define ERR_ACN_ENCODE_PIOHWASPINCONFIG_MPINCONFIG		154  /**/
#define ERR_ACN_ENCODE_PIOHWASPINCONFIG_MDIRECTIONCONFIG_2		164  /**/
#define asn1SccPioHwasPinConfig_REQUIRED_BYTES_FOR_ACN_ENCODING       12 
#define asn1SccPioHwasPinConfig_REQUIRED_BITS_FOR_ACN_ENCODING        96

flag asn1SccPioHwasPinConfig_ACN_Encode(const asn1SccPioHwasPinConfig* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PIOHWASPINCONFIG		170  /**/
#define ERR_ACN_DECODE_PIOHWASPINCONFIG_MPORTCONFIG_2		150  /**/
#define ERR_ACN_DECODE_PIOHWASPINCONFIG_MPINCONFIG		155  /**/
#define ERR_ACN_DECODE_PIOHWASPINCONFIG_MDIRECTIONCONFIG_2		165  /**/
flag asn1SccPioHwasPinConfig_ACN_Decode(asn1SccPioHwasPinConfig* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccMyInteger;


flag asn1SccMyInteger_Equal(const asn1SccMyInteger* pVal1, const asn1SccMyInteger* pVal2);

void asn1SccMyInteger_Initialize(asn1SccMyInteger* pVal);

#define ERR_MYINTEGER		206  /**/
flag asn1SccMyInteger_IsConstraintValid(const asn1SccMyInteger* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MYINTEGER		207  /**/
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING        14

flag asn1SccMyInteger_Encode(const asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYINTEGER		208  /**/
flag asn1SccMyInteger_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYINTEGER		209  /**/
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ACN_ENCODING        14

flag asn1SccMyInteger_ACN_Encode(const asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYINTEGER		210  /**/
flag asn1SccMyInteger_ACN_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_T_INT32		211  /**/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		212  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		213  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		214  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		215  /**/
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_T_UINT32		216  /**/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		217  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		218  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		219  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		220  /**/
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_T_INT8		221  /**/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		222  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		223  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		224  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		225  /**/
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_T_UINT8		226  /**/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		227  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		228  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		229  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		230  /**/
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_T_BOOLEAN		231  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		232  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		233  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		234  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		235  /**/
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

flag asn1SccT_Null_Record_Equal(const asn1SccT_Null_Record* pVal1, const asn1SccT_Null_Record* pVal2);

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define ERR_T_NULL_RECORD		236  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag asn1SccT_Null_Record_ACN_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_ACN_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
