pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");

pragma Warnings (Off, "no entities of ""COM_N7SPACE_PIOHWAS"" are referenced");
pragma Warnings (Off, "use clause for package ""COM_N7SPACE_PIOHWAS"" has no effect");
pragma Warnings (Off, "unit ""COM_N7SPACE_PIOHWAS"" is not referenced");
with COM_N7SPACE_PIOHWAS;
pragma Warnings (On, "no entities of ""COM_N7SPACE_PIOHWAS"" are referenced");
pragma Warnings (On, "use clause for package ""COM_N7SPACE_PIOHWAS"" has no effect");
pragma Warnings (On, "unit ""COM_N7SPACE_PIOHWAS"" is not referenced");

pragma Warnings (On, "redundant with clause in body");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through previous use_type_clause at");
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPin;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortPerAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortOerAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortOdrAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortIfdrAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortSodrAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortCodrAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortMddrAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortPudrAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortOwerAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortOwdrAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortIfscdrAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortPpddrAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_mPortSchmittAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas;
use type COM_N7SPACE_PIOHWAS.asn1SccDestinationAddress;
use type COM_N7SPACE_PIOHWAS.asn1SccWordMask;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwasPinConfig_mPinConfig;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwasPinConfig;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_Port;
use type COM_N7SPACE_PIOHWAS.asn1SccPioHwas_Direction;
use type COM_N7SPACE_PIOHWAS.asn1SccPmcHwas_pMC_PCSR0_OFFSET;
use type COM_N7SPACE_PIOHWAS.asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK;
use type COM_N7SPACE_PIOHWAS.asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK;
use type COM_N7SPACE_PIOHWAS.asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK;
use type COM_N7SPACE_PIOHWAS.asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK;
use type COM_N7SPACE_PIOHWAS.asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK;
use type COM_N7SPACE_PIOHWAS.asn1SccPmcHwas;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through previous use_type_clause at");
package body Piohwasdriver_Datamodel with SPARK_Mode is



pragma Warnings (Off, "condition can only be False if invalid values present");
pragma Warnings (Off, "condition can only be True if invalid values present");


function asn1SccPiohwasdriver_States_Equal (val1, val2 :  asn1SccPiohwasdriver_States) return Boolean
is

begin
	return val1 = val2;

end asn1SccPiohwasdriver_States_Equal;

function asn1SccPiohwasdriver_States_Init return asn1SccPiohwasdriver_States
is
    val: asn1SccPiohwasdriver_States;
begin
    val := asn1Sccoff;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccPiohwasdriver_States_Init;

function asn1SccPiohwasdriver_States_IsConstraintValid(val : asn1SccPiohwasdriver_States) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (((val = asn1Sccoff)) OR ((val = asn1Sccidle)));
    ret.ErrorCode := (if ret.Success then 0 else ERR_PIOHWASDRIVER_STATES);
    return ret;
end asn1SccPiohwasdriver_States_IsConstraintValid;



function asn1SccPiohwasdriver_Context_Equal (val1, val2 :  asn1SccPiohwasdriver_Context) return Boolean
is
    pragma Warnings (Off, "initialization of ret has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ret has no effect");

begin
    ret := (val1.state = val2.state);

    if ret then
        ret := (val1.init_done = val2.init_done);

        if ret then
            ret := COM_N7SPACE_PIOHWAS.asn1SccPioHwas_Equal(val1.piovar, val2.piovar);

            if ret then
                ret := COM_N7SPACE_PIOHWAS.asn1SccPioHwasPinConfig_Equal(val1.configvar, val2.configvar);

                if ret then
                    ret := COM_N7SPACE_PIOHWAS.asn1SccPmcHwas_Equal(val1.pmcvar, val2.pmcvar);

                end if;
            end if;
        end if;
    end if;
	return ret;

end asn1SccPiohwasdriver_Context_Equal;

function asn1SccPiohwasdriver_Context_Init return asn1SccPiohwasdriver_Context
is
    val: asn1SccPiohwasdriver_Context;
begin

    --set state 
    val.state := asn1SccPiohwasdriver_States_Init;
    --set init_done 
    val.init_done := FALSE;
    --set piovar 
    val.piovar := COM_N7SPACE_PIOHWAS.asn1SccPioHwas_Init;
    --set configvar 
    val.configvar := COM_N7SPACE_PIOHWAS.asn1SccPioHwasPinConfig_Init;
    --set pmcvar 
    val.pmcvar := COM_N7SPACE_PIOHWAS.asn1SccPmcHwas_Init;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccPiohwasdriver_Context_Init;

function asn1SccPiohwasdriver_Context_IsConstraintValid(val : asn1SccPiohwasdriver_Context) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret := asn1SccPiohwasdriver_States_IsConstraintValid(val.state);
    if ret.Success then
        ret := COM_N7SPACE_PIOHWAS.asn1SccPioHwas_IsConstraintValid(val.piovar);
        if ret.Success then
            ret := COM_N7SPACE_PIOHWAS.asn1SccPioHwasPinConfig_IsConstraintValid(val.configvar);
            if ret.Success then
                ret := COM_N7SPACE_PIOHWAS.asn1SccPmcHwas_IsConstraintValid(val.pmcvar);
            end if;
        end if;
    end if;
    return ret;
end asn1SccPiohwasdriver_Context_IsConstraintValid;


pragma Warnings (On, "condition can only be False if invalid values present");
pragma Warnings (On, "condition can only be True if invalid values present");

 
end Piohwasdriver_Datamodel;