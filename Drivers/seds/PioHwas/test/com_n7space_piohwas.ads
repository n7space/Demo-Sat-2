pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");



package COM_N7SPACE_PIOHWAS with SPARK_Mode
is


subtype asn1SccDestinationAddress is adaasn1rtl.Asn1UInt range 0 .. 4294967295;


function asn1SccDestinationAddress_Equal(val1, val2 : asn1SccDestinationAddress) return Boolean;

function asn1SccDestinationAddress_Init return asn1SccDestinationAddress;

ERR_DESTINATIONADDRESS:constant Integer := 1; 
function asn1SccDestinationAddress_IsConstraintValid(val : asn1SccDestinationAddress) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccSourceAddress is adaasn1rtl.Asn1UInt range 0 .. 4294967295;


function asn1SccSourceAddress_Equal(val1, val2 : asn1SccSourceAddress) return Boolean;

function asn1SccSourceAddress_Init return asn1SccSourceAddress;

ERR_SOURCEADDRESS:constant Integer := 6; 
function asn1SccSourceAddress_IsConstraintValid(val : asn1SccSourceAddress) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccWord is adaasn1rtl.Asn1UInt range 0 .. 4294967295;


function asn1SccWord_Equal(val1, val2 : asn1SccWord) return Boolean;

function asn1SccWord_Init return asn1SccWord;

ERR_WORD:constant Integer := 11; 
function asn1SccWord_IsConstraintValid(val : asn1SccWord) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccWordMask is adaasn1rtl.Asn1UInt range 0 .. 4294967295;


function asn1SccWordMask_Equal(val1, val2 : asn1SccWordMask) return Boolean;

function asn1SccWordMask_Init return asn1SccWordMask;

ERR_WORDMASK:constant Integer := 16; 
function asn1SccWordMask_IsConstraintValid(val : asn1SccWordMask) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPioHwas --------------------------------------------
subtype asn1SccPioHwas_mPortAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPin is asn1SccWordMask range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortPerAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortOerAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortOdrAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortIfdrAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortSodrAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortCodrAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortMddrAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortPudrAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortOwerAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortOwdrAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortIfscdrAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortPpddrAddress is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPioHwas_mPortSchmittAddress is asn1SccDestinationAddress range 0 .. 4294967295;


type asn1SccPioHwas is record 
    mPortAddress : asn1SccPioHwas_mPortAddress;
    mPin : asn1SccPioHwas_mPin;
    mPortPerAddress : asn1SccPioHwas_mPortPerAddress;
    mPortOerAddress : asn1SccPioHwas_mPortOerAddress;
    mPortOdrAddress : asn1SccPioHwas_mPortOdrAddress;
    mPortIfdrAddress : asn1SccPioHwas_mPortIfdrAddress;
    mPortSodrAddress : asn1SccPioHwas_mPortSodrAddress;
    mPortCodrAddress : asn1SccPioHwas_mPortCodrAddress;
    mPortMddrAddress : asn1SccPioHwas_mPortMddrAddress;
    mPortPudrAddress : asn1SccPioHwas_mPortPudrAddress;
    mPortOwerAddress : asn1SccPioHwas_mPortOwerAddress;
    mPortOwdrAddress : asn1SccPioHwas_mPortOwdrAddress;
    mPortIfscdrAddress : asn1SccPioHwas_mPortIfscdrAddress;
    mPortPpddrAddress : asn1SccPioHwas_mPortPpddrAddress;
    mPortSchmittAddress : asn1SccPioHwas_mPortSchmittAddress;
end record;


function asn1SccPioHwas_mPortAddress_Equal(val1, val2 : asn1SccPioHwas_mPortAddress) return Boolean;

function asn1SccPioHwas_mPin_Equal(val1, val2 : asn1SccPioHwas_mPin) return Boolean;

function asn1SccPioHwas_mPortPerAddress_Equal(val1, val2 : asn1SccPioHwas_mPortPerAddress) return Boolean;

function asn1SccPioHwas_mPortOerAddress_Equal(val1, val2 : asn1SccPioHwas_mPortOerAddress) return Boolean;

function asn1SccPioHwas_mPortOdrAddress_Equal(val1, val2 : asn1SccPioHwas_mPortOdrAddress) return Boolean;

function asn1SccPioHwas_mPortIfdrAddress_Equal(val1, val2 : asn1SccPioHwas_mPortIfdrAddress) return Boolean;

function asn1SccPioHwas_mPortSodrAddress_Equal(val1, val2 : asn1SccPioHwas_mPortSodrAddress) return Boolean;

function asn1SccPioHwas_mPortCodrAddress_Equal(val1, val2 : asn1SccPioHwas_mPortCodrAddress) return Boolean;

function asn1SccPioHwas_mPortMddrAddress_Equal(val1, val2 : asn1SccPioHwas_mPortMddrAddress) return Boolean;

function asn1SccPioHwas_mPortPudrAddress_Equal(val1, val2 : asn1SccPioHwas_mPortPudrAddress) return Boolean;

function asn1SccPioHwas_mPortOwerAddress_Equal(val1, val2 : asn1SccPioHwas_mPortOwerAddress) return Boolean;

function asn1SccPioHwas_mPortOwdrAddress_Equal(val1, val2 : asn1SccPioHwas_mPortOwdrAddress) return Boolean;

function asn1SccPioHwas_mPortIfscdrAddress_Equal(val1, val2 : asn1SccPioHwas_mPortIfscdrAddress) return Boolean;

function asn1SccPioHwas_mPortPpddrAddress_Equal(val1, val2 : asn1SccPioHwas_mPortPpddrAddress) return Boolean;

function asn1SccPioHwas_mPortSchmittAddress_Equal(val1, val2 : asn1SccPioHwas_mPortSchmittAddress) return Boolean;

function asn1SccPioHwas_Equal(val1, val2 : asn1SccPioHwas) return Boolean;

function asn1SccPioHwas_mPortAddress_Init return asn1SccPioHwas_mPortAddress;
function asn1SccPioHwas_mPin_Init return asn1SccPioHwas_mPin;
function asn1SccPioHwas_mPortPerAddress_Init return asn1SccPioHwas_mPortPerAddress;
function asn1SccPioHwas_mPortOerAddress_Init return asn1SccPioHwas_mPortOerAddress;
function asn1SccPioHwas_mPortOdrAddress_Init return asn1SccPioHwas_mPortOdrAddress;
function asn1SccPioHwas_mPortIfdrAddress_Init return asn1SccPioHwas_mPortIfdrAddress;
function asn1SccPioHwas_mPortSodrAddress_Init return asn1SccPioHwas_mPortSodrAddress;
function asn1SccPioHwas_mPortCodrAddress_Init return asn1SccPioHwas_mPortCodrAddress;
function asn1SccPioHwas_mPortMddrAddress_Init return asn1SccPioHwas_mPortMddrAddress;
function asn1SccPioHwas_mPortPudrAddress_Init return asn1SccPioHwas_mPortPudrAddress;
function asn1SccPioHwas_mPortOwerAddress_Init return asn1SccPioHwas_mPortOwerAddress;
function asn1SccPioHwas_mPortOwdrAddress_Init return asn1SccPioHwas_mPortOwdrAddress;
function asn1SccPioHwas_mPortIfscdrAddress_Init return asn1SccPioHwas_mPortIfscdrAddress;
function asn1SccPioHwas_mPortPpddrAddress_Init return asn1SccPioHwas_mPortPpddrAddress;
function asn1SccPioHwas_mPortSchmittAddress_Init return asn1SccPioHwas_mPortSchmittAddress;
function asn1SccPioHwas_Init return asn1SccPioHwas;

ERR_PIOHWAS:constant Integer := 136; 
ERR_PIOHWAS_MPORTADDRESS:constant Integer := 61; 
ERR_PIOHWAS_MPIN:constant Integer := 66; 
ERR_PIOHWAS_MPORTPERADDRESS:constant Integer := 71; 
ERR_PIOHWAS_MPORTOERADDRESS:constant Integer := 76; 
ERR_PIOHWAS_MPORTODRADDRESS:constant Integer := 81; 
ERR_PIOHWAS_MPORTIFDRADDRESS:constant Integer := 86; 
ERR_PIOHWAS_MPORTSODRADDRESS:constant Integer := 91; 
ERR_PIOHWAS_MPORTCODRADDRESS:constant Integer := 96; 
ERR_PIOHWAS_MPORTMDDRADDRESS:constant Integer := 101; 
ERR_PIOHWAS_MPORTPUDRADDRESS:constant Integer := 106; 
ERR_PIOHWAS_MPORTOWERADDRESS:constant Integer := 111; 
ERR_PIOHWAS_MPORTOWDRADDRESS:constant Integer := 116; 
ERR_PIOHWAS_MPORTIFSCDRADDRESS:constant Integer := 121; 
ERR_PIOHWAS_MPORTPPDDRADDRESS:constant Integer := 126; 
ERR_PIOHWAS_MPORTSCHMITTADDRESS:constant Integer := 131; 
function asn1SccPioHwas_IsConstraintValid(val : asn1SccPioHwas) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPmcHwas --------------------------------------------
subtype asn1SccPmcHwas_pMC_PCSR0_OFFSET is asn1SccDestinationAddress range 0 .. 4294967295;

subtype asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK is asn1SccWordMask range 0 .. 4294967295;

subtype asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK is asn1SccWordMask range 0 .. 4294967295;

subtype asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK is asn1SccWordMask range 0 .. 4294967295;

subtype asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK is asn1SccWordMask range 0 .. 4294967295;

subtype asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK is asn1SccWordMask range 0 .. 4294967295;


type asn1SccPmcHwas is record 
    pMC_PCSR0_OFFSET : asn1SccPmcHwas_pMC_PCSR0_OFFSET;
    pMC_PCxR0_PID10_PIOA_MASK : asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK;
    pMC_PCxR0_PID11_PIOB_MASK : asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK;
    pMC_PCxR0_PID12_PIOC_MASK : asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK;
    pMC_PCxR0_PID16_PIOD_MASK : asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK;
    pMC_PCxR0_PID17_PIOE_MASK : asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK;
end record;


function asn1SccPmcHwas_pMC_PCSR0_OFFSET_Equal(val1, val2 : asn1SccPmcHwas_pMC_PCSR0_OFFSET) return Boolean;

function asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK_Equal(val1, val2 : asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK) return Boolean;

function asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK_Equal(val1, val2 : asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK) return Boolean;

function asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK_Equal(val1, val2 : asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK) return Boolean;

function asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK_Equal(val1, val2 : asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK) return Boolean;

function asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK_Equal(val1, val2 : asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK) return Boolean;

function asn1SccPmcHwas_Equal(val1, val2 : asn1SccPmcHwas) return Boolean;

function asn1SccPmcHwas_pMC_PCSR0_OFFSET_Init return asn1SccPmcHwas_pMC_PCSR0_OFFSET;
function asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK_Init return asn1SccPmcHwas_pMC_PCxR0_PID10_PIOA_MASK;
function asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK_Init return asn1SccPmcHwas_pMC_PCxR0_PID11_PIOB_MASK;
function asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK_Init return asn1SccPmcHwas_pMC_PCxR0_PID12_PIOC_MASK;
function asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK_Init return asn1SccPmcHwas_pMC_PCxR0_PID16_PIOD_MASK;
function asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK_Init return asn1SccPmcHwas_pMC_PCxR0_PID17_PIOE_MASK;
function asn1SccPmcHwas_Init return asn1SccPmcHwas;

ERR_PMCHWAS:constant Integer := 201; 
ERR_PMCHWAS_PMC_PCSR0_OFFSET:constant Integer := 171; 
ERR_PMCHWAS_PMC_PCXR0_PID10_PIOA_MASK:constant Integer := 176; 
ERR_PMCHWAS_PMC_PCXR0_PID11_PIOB_MASK:constant Integer := 181; 
ERR_PMCHWAS_PMC_PCXR0_PID12_PIOC_MASK:constant Integer := 186; 
ERR_PMCHWAS_PMC_PCXR0_PID16_PIOD_MASK:constant Integer := 191; 
ERR_PMCHWAS_PMC_PCXR0_PID17_PIOE_MASK:constant Integer := 196; 
function asn1SccPmcHwas_IsConstraintValid(val : asn1SccPmcHwas) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccBufferSize is adaasn1rtl.Asn1UInt range 0 .. 65535;


function asn1SccBufferSize_Equal(val1, val2 : asn1SccBufferSize) return Boolean;

function asn1SccBufferSize_Init return asn1SccBufferSize;

ERR_BUFFERSIZE:constant Integer := 21; 
function asn1SccBufferSize_IsConstraintValid(val : asn1SccBufferSize) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccInterruptNumber is adaasn1rtl.Asn1UInt range 0 .. 255;


function asn1SccInterruptNumber_Equal(val1, val2 : asn1SccInterruptNumber) return Boolean;

function asn1SccInterruptNumber_Init return asn1SccInterruptNumber;

ERR_INTERRUPTNUMBER:constant Integer := 26; 
function asn1SccInterruptNumber_IsConstraintValid(val : asn1SccInterruptNumber) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccByte is adaasn1rtl.Asn1UInt range 0 .. 255;


function asn1SccByte_Equal(val1, val2 : asn1SccByte) return Boolean;

function asn1SccByte_Init return asn1SccByte;

ERR_BYTE:constant Integer := 31; 
function asn1SccByte_IsConstraintValid(val : asn1SccByte) return adaasn1rtl.ASN1_RESULT;
-- asn1SccByteBuffer --------------------------------------------

subtype asn1SccByteBuffer_elem is asn1SccByte range 0 .. 255;


subtype asn1SccByteBuffer_index is Integer range 1..65535;
type asn1SccByteBuffer_array is array (asn1SccByteBuffer_index) of asn1SccByteBuffer_elem;
subtype asn1SccByteBuffer_length_index is Integer range 0..65535;
type asn1SccByteBuffer is  record
    Length : asn1SccByteBuffer_length_index;
    Data  : asn1SccByteBuffer_array;
end record;

function asn1SccByteBuffer_elem_Equal(val1, val2 : asn1SccByteBuffer_elem) return Boolean;

function asn1SccByteBuffer_Equal(val1, val2 : asn1SccByteBuffer) return Boolean;

function asn1SccByteBuffer_elem_Init return asn1SccByteBuffer_elem;
function asn1SccByteBuffer_Init return asn1SccByteBuffer;

ERR_BYTEBUFFER:constant Integer := 41; 
ERR_BYTEBUFFER_ELM:constant Integer := 36; 
function asn1SccByteBuffer_IsConstraintValid(val : asn1SccByteBuffer) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccPinNumber is adaasn1rtl.Asn1UInt range 0 .. 64;


function asn1SccPinNumber_Equal(val1, val2 : asn1SccPinNumber) return Boolean;

function asn1SccPinNumber_Init return asn1SccPinNumber;

ERR_PINNUMBER:constant Integer := 46; 
function asn1SccPinNumber_IsConstraintValid(val : asn1SccPinNumber) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccPioHwas_Port_index_range is Integer range 0..4;
type asn1SccPioHwas_Port is (asn1SccpioHwas_Port_A, asn1SccpioHwas_Port_B, asn1SccpioHwas_Port_C, asn1SccpioHwas_Port_D, asn1SccpioHwas_Port_E) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccPioHwas_Port use
    (asn1SccpioHwas_Port_A => 0, asn1SccpioHwas_Port_B => 1, asn1SccpioHwas_Port_C => 2, asn1SccpioHwas_Port_D => 3, asn1SccpioHwas_Port_E => 4);

function asn1SccPioHwas_Port_Equal(val1, val2 : asn1SccPioHwas_Port) return Boolean;

function asn1SccPioHwas_Port_Init return asn1SccPioHwas_Port;

ERR_PIOHWAS_PORT:constant Integer := 51; 
function asn1SccPioHwas_Port_IsConstraintValid(val : asn1SccPioHwas_Port) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccPioHwas_Direction_index_range is Integer range 0..1;
type asn1SccPioHwas_Direction is (asn1SccpioHwas_Direction_Input, asn1SccpioHwas_Direction_Output) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccPioHwas_Direction use
    (asn1SccpioHwas_Direction_Input => 0, asn1SccpioHwas_Direction_Output => 1);

function asn1SccPioHwas_Direction_Equal(val1, val2 : asn1SccPioHwas_Direction) return Boolean;

function asn1SccPioHwas_Direction_Init return asn1SccPioHwas_Direction;

ERR_PIOHWAS_DIRECTION:constant Integer := 56; 
function asn1SccPioHwas_Direction_IsConstraintValid(val : asn1SccPioHwas_Direction) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPioHwasPinConfig --------------------------------------------
subtype asn1SccPioHwasPinConfig_mPinConfig is asn1SccWordMask range 0 .. 4294967295;


type asn1SccPioHwasPinConfig is record 
    mPortConfig : asn1SccPioHwas_Port;
    mPinConfig : asn1SccPioHwasPinConfig_mPinConfig;
    mDirectionConfig : asn1SccPioHwas_Direction;
end record;


function asn1SccPioHwasPinConfig_mPinConfig_Equal(val1, val2 : asn1SccPioHwasPinConfig_mPinConfig) return Boolean;

function asn1SccPioHwasPinConfig_Equal(val1, val2 : asn1SccPioHwasPinConfig) return Boolean;

function asn1SccPioHwasPinConfig_mPinConfig_Init return asn1SccPioHwasPinConfig_mPinConfig;
function asn1SccPioHwasPinConfig_Init return asn1SccPioHwasPinConfig;

ERR_PIOHWASPINCONFIG:constant Integer := 166; 
ERR_PIOHWASPINCONFIG_MPORTCONFIG_2:constant Integer := 146; 
ERR_PIOHWASPINCONFIG_MPINCONFIG:constant Integer := 151; 
ERR_PIOHWASPINCONFIG_MDIRECTIONCONFIG_2:constant Integer := 161; 
function asn1SccPioHwasPinConfig_IsConstraintValid(val : asn1SccPioHwasPinConfig) return adaasn1rtl.ASN1_RESULT;
pragma Warnings (Off, "there are no others");
 
pragma Warnings (On, "there are no others");
private
   --# hide COM_N7SPACE_PIOHWAS;


end COM_N7SPACE_PIOHWAS;