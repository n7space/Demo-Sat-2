<?xml version="1.0" encoding="utf-8"?>
<PackageFile xmlns="http://www.ccsds.org/schema/sois/seds" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="seds.xsd">
  <Package name="com/n7space/PioHwas">
    <DataTypeSet>
      <IntegerDataType name="DestinationAddress">
        <LongDescription>Type for a memory destination address.</LongDescription>
        <IntegerDataEncoding encoding="unsigned" sizeInBits="32" byteOrder="littleEndian" />
        <Range>
          <MinMaxRange rangeType="inclusiveMinInclusiveMax" min="0" max="4294967295" />
        </Range>
      </IntegerDataType>
      <IntegerDataType name="SourceAddress">
        <LongDescription>Type for a memory source address.</LongDescription>
        <IntegerDataEncoding encoding="unsigned" sizeInBits="32" byteOrder="littleEndian" />
        <Range>
          <MinMaxRange rangeType="inclusiveMinInclusiveMax" min="0" max="4294967295" />
        </Range>
      </IntegerDataType>
      <IntegerDataType name="Word">
        <LongDescription>Machine word.</LongDescription>
        <IntegerDataEncoding encoding="unsigned" byteOrder="littleEndian" sizeInBits="32" />
        <Range>
          <MinMaxRange rangeType="inclusiveMinInclusiveMax" min="0" max="4294967295" />
        </Range>
      </IntegerDataType>
      <IntegerDataType name="WordMask">
        <LongDescription>Mask for a machine word.</LongDescription>
        <IntegerDataEncoding byteOrder="littleEndian" sizeInBits="32" encoding="unsigned" />
        <Range>
          <MinMaxRange min="0" max="4294967295" rangeType="inclusiveMinInclusiveMax" />
        </Range>
      </IntegerDataType>
      <IntegerDataType name="BufferSize">
        <LongDescription>Size of a memory transfer.</LongDescription>
        <IntegerDataEncoding byteOrder="littleEndian" sizeInBits="16" encoding="unsigned" />
        <Range>
          <MinMaxRange max="65535" min="0" rangeType="inclusiveMinInclusiveMax" />
        </Range>
      </IntegerDataType>
      <IntegerDataType name="InterruptNumber">
        <LongDescription>Interrupt number for NVIC.</LongDescription>
        <IntegerDataEncoding byteOrder="littleEndian" sizeInBits="8" encoding="unsigned" />
        <Range>
          <MinMaxRange max="255" min="0" rangeType="inclusiveMinInclusiveMax" />
        </Range>
      </IntegerDataType>
      <IntegerDataType name="Byte">
        <LongDescription>Byte.</LongDescription>
        <IntegerDataEncoding byteOrder="littleEndian" encoding="unsigned" sizeInBits="8" />
        <Range>
          <MinMaxRange max="255" min="0" rangeType="inclusiveMinInclusiveMax" />
        </Range>
      </IntegerDataType>
      <ArrayDataType name="ByteBuffer" dataTypeRef="Byte">
        <LongDescription>Byte buffer.</LongDescription>
        <DimensionList>
          <Dimension size="65535" />
        </DimensionList>
      </ArrayDataType>
      <IntegerDataType name="PinNumber">
        <IntegerDataEncoding byteOrder="littleEndian" sizeInBits="16" encoding="unsigned" />
        <Range>
          <MinMaxRange max="64" min="0" rangeType="inclusiveMinInclusiveMax" />
        </Range>
      </IntegerDataType>
      <EnumeratedDataType name="PioHwas_Port">
        <LongDescription>Definitions of PIO ports</LongDescription>
        <IntegerDataEncoding encoding="unsigned" byteOrder="littleEndian" sizeInBits="32" />
        <EnumerationList>
          <Enumeration label="PioHwas_Port_A" value="0"></Enumeration>
          <Enumeration label="PioHwas_Port_B" value="1" />
          <Enumeration label="PioHwas_Port_C" value="2" />
          <Enumeration label="PioHwas_Port_D" value="3" />
          <Enumeration label="PioHwas_Port_E" value="4" />
        </EnumerationList>
      </EnumeratedDataType>
      <EnumeratedDataType name="PioHwas_Direction">
        <LongDescription>I/O line flow direction</LongDescription>
        <IntegerDataEncoding encoding="unsigned" byteOrder="littleEndian" sizeInBits="32" />
        <EnumerationList>
          <Enumeration label="PioHwas_Direction_Input" value="0"></Enumeration>
          <Enumeration label="PioHwas_Direction_Output" value="1" />
        </EnumerationList>
      </EnumeratedDataType>
      <EnumeratedDataType name="PioHwas_Pull">
        <LongDescription>I/O line pull resistors</LongDescription>
        <IntegerDataEncoding encoding="unsigned" byteOrder="littleEndian" sizeInBits="32" />
        <EnumerationList>
          <Enumeration label="PioHwas_Pull_None" value="0"></Enumeration>
          <Enumeration label="PioHwas_Pull_Up" value="1" />
          <Enumeration label="PioHwas_Pull_Down" value="2" />
        </EnumerationList>
      </EnumeratedDataType>
      <EnumeratedDataType name="PioHwas_Filter">
        <LongDescription>I/O line filtering options.</LongDescription>
        <IntegerDataEncoding encoding="unsigned" byteOrder="littleEndian" sizeInBits="32" />
        <EnumerationList>
          <Enumeration label="PioHwas_Filter_None" value="0"></Enumeration>
          <Enumeration label="PioHwas_Filter_Glitch" value="1" />
          <Enumeration label="PioHwas_Pull_Down" value="2" />
        </EnumerationList>
      </EnumeratedDataType>
      <ContainerDataType name="PioHwas_Pin_Config">
        <EntryList>
          <Entry name="port" type="PioHwas_Port" />
          <Entry name="pin" type="WordMask" />
          <Entry name="direction" type="PioHwas_Direction" />
          <Entry name="pull" type="PioHwas_Pull" />
          <Entry name="filter" type="PioHwas_Filter" />
        </EntryList>
      </ContainerDataType>
      <ContainerDataType name="PioHwas">
        <EntryList>
          <Entry name="port" type="SourceAddress"></Entry>
          <Entry name="pin" type="WordMask" />
        </EntryList>
      </ContainerDataType>
      <BooleanDataType name="PinState">
        <BooleanDataEncoding sizeInBits="8" />
      </BooleanDataType>
    </DataTypeSet>
    <DeclaredInterfaceSet>
      <Interface level="subnetwork" name="InterruptSubscriptionManagementInterfaceType">
        <LongDescription>Interface for registering to hardware interrupts.</LongDescription>
        <CommandSet>
          <Command name="SubscribeToInterrupt" mode="sync">
            <LongDescription>Subscribe to a hardware interrupt</LongDescription>
            <Argument name="interrupt" type="InterruptNumber" mode="in" />
          </Command>
        </CommandSet>
      </Interface>
      <Interface level="subnetwork" name="InterruptSubscriptionInterfaceType">
        <LongDescription>Interface for receiving interrupt notifications.</LongDescription>
        <CommandSet>
          <Command name="Interrupt" mode="async">
            <LongDescription>Receive a hardware interrupt notification. The notification is asynchronous, as it may not be executed in the interrupt context</LongDescription>
            <Argument name="interrupt" type="InterruptNumber" mode="in" />
          </Command>
        </CommandSet>
      </Interface>
      <Interface level="subnetwork" name="InterruptManagementInterfaceType">
        <LongDescription>Interface for managing hardware interrupts.</LongDescription>
        <CommandSet>
          <Command name="EnableInterrupt" mode="sync">
            <LongDescription>Enable a hardware interrupt.</LongDescription>
            <Argument name="interrupt" type="InterruptNumber" mode="in" />
          </Command>
          <Command name="DisableInterrupt" mode="sync">
            <LongDescription>Disable a hardware interrupt.</LongDescription>
            <Argument name="interrupt" type="InterruptNumber" mode="in" />
          </Command>
        </CommandSet>
      </Interface>
      <Interface level="subnetwork" name="RawMemoryAccessInterfaceType">
        <LongDescription>Interface for accessing RAW memory.</LongDescription>
        <CommandSet>
          <Command name="ReadWord" mode="sync">
            <LongDescription>Read word from memory, masked by the mask. The address must be word-aligned.</LongDescription>
            <Argument name="address" type="SourceAddress" mode="in" />
            <Argument name="mask" type="WordMask" mode="in" />
            <Argument name="value" type="Word" mode="out" />
          </Command>
          <Command name="WriteWord" mode="sync">
            <LongDescription>Write word to memory, masked by the mask.  The address must be word-aligned.</LongDescription>
            <Argument name="address" type="DestinationAddress" mode="in" />
            <Argument name="mask" type="WordMask" mode="in" />
            <Argument name="value" type="Word" mode="in" />
          </Command>
          <Command name="WriteBuffer" mode="sync">
            <LongDescription>Write Byte Buffer to memory.</LongDescription>
            <Argument name="address" type="DestinationAddress" mode="in" />
            <Argument name="buffer" type="ByteBuffer" mode="in" />
          </Command>
          <Command name="ReadBuffer" mode="sync">
            <LongDescription>Read Byte Buffer from memory.</LongDescription>
            <Argument name="address" type="SourceAddress" mode="in"></Argument>
            <Argument name="buffer" type="ByteBuffer" mode="out" />
          </Command>
        </CommandSet>
      </Interface>
      <Interface level="functional" name="PioHwasInterfaceType">
        <CommandSet>
          <Command name="InitPin" mode="sync">
            <LongDescription>Set pin to High</LongDescription>
            <Argument name="pin" type="PioHwas" mode="inout" />
            <Argument name="config" type="PioHwas_Pin_Config" mode="in" />
          </Command>
          <Command name="SetPin" mode="sync">
            <LongDescription>Set pin to High</LongDescription>
            <Argument name="pin" type="PioHwas" mode="inout" />
          </Command>
          <Command name="ResetPin" mode="sync">
            <LongDescription>Set pin to Low</LongDescription>
            <Argument name="pin" type="PioHwas" mode="inout" />
          </Command>
          <Command name="TogglePin" mode="sync">
            <LongDescription>Toggle pin state</LongDescription>
            <Argument name="pin" type="PioHwas" mode="inout" />
          </Command>
          <Command name="GetPin" mode="sync">
            <LongDescription>Return pin state</LongDescription>
            <Argument name="pin" type="PioHwas" mode="inout"></Argument>
            <Argument name="state" type="PinState" mode="out"></Argument>
          </Command>
        </CommandSet>
      </Interface>
      <Interface level="functional" name="RegisterHwasInterfaceType">
        <CommandSet>
          <Command name="GetPins" mode="sync">
            <LongDescription>Gets the bit values from the register using given mask</LongDescription>
            <Argument name="register" type="SourceAddress" mode="in" />
            <Argument name="mask" type="WordMask" mode="in" />
          </Command>
          <Command name="SetPins" mode="sync">
            <LongDescription>Sets the chosen bits in the given register.</LongDescription>
            <Argument name="register" type="SourceAddress" mode="in"></Argument>
            <Argument name="bitsToSet" type="Word" mode="in"></Argument>
          </Command>
        </CommandSet>
      </Interface>
    </DeclaredInterfaceSet>
    <ComponentSet>
      <Component name="RegisterHwas">
        <LongDescription>Register data manipulation function prototypes and datatypes.</LongDescription>
        <ProvidedInterfaceSet>
          <Interface name="RegisterHwas" type="RegisterHwasInterfaceType" />
        </ProvidedInterfaceSet>
        <RequiredInterfaceSet>
          <Interface name="RawMemoryAccess" type="RawMemoryAccessInterfaceType" />
        </RequiredInterfaceSet>
        <Implementation>
          <ActivitySet>
            <Activity name="GetBitsActivity">
              <Argument name="register" type="SourceAddress" />
              <Argument name="mask" type="WordMask"></Argument>
              <Argument name="retValue" type="Word"></Argument>
              <Body>
                <SendCommandPrimitive interface="RawMemoryAccess" command="ReadWord">
                  <ArgumentValue name="address">
                    <VariableRef variableRef="register" />
                  </ArgumentValue>
                  <ArgumentValue name="mask">
                    <VariableRef variableRef="mask" />
                  </ArgumentValue>
                  <ArgumentValue name="value">
                    <VariableRef variableRef="retValue" />
                  </ArgumentValue>
                </SendCommandPrimitive>
              </Body>
            </Activity>
            <Activity name="SetBitsActivity">
              <Argument name="register" type="SourceAddress" />
              <Argument name="bitsToSet" type="Word" />
              <Body>
                <SendCommandPrimitive interface="RawMemoryAccess" command="WriteWord">
                  <ArgumentValue name="address">
                    <VariableRef variableRef="register" />
                  </ArgumentValue>
                  <ArgumentValue name="mask">
                    <VariableRef variableRef="bitsToSet" />
                  </ArgumentValue>
                  <ArgumentValue name="value">
                    <VariableRef variableRef="bitsToSet" />
                  </ArgumentValue>
                </SendCommandPrimitive>
              </Body>
            </Activity>
          </ActivitySet>
        </Implementation>
      </Component>
      <Component name="PioHwasDriver">
        <LongDescription>SEDS PioHwas driver implementation</LongDescription>
        <ProvidedInterfaceSet>
          <Interface name="PioHwas" type="PioHwasInterfaceType" />
        </ProvidedInterfaceSet>
        <RequiredInterfaceSet>
          <Interface name="RegisterHwas" type="RegisterHwasInterfaceType" />
        </RequiredInterfaceSet>
        <Implementation>
          <VariableSet>
            <Variable name="PioRegisterAddress" type="SourceAddress" />
          </VariableSet>
          <ActivitySet>
            <Activity name="SetPinActivity">
              <Argument name="pio" type="PioHwas" />
              <Body>
                <Assignment outputVariableRef="PioRegisterAddress">
                  <VariableRef variableRef="pio.port" />
                </Assignment>
                <MathOperation outputVariableRef="PioRegisterAddress">
                  <Operator operator="add" />
                  <VariableRef variableRef="PioRegisterAddress" />
                  <Value value="48" />
                </MathOperation>
                <SendCommandPrimitive interface="RegisterHwas" command="SetPins">
                  <ArgumentValue name="register">
                    <VariableRef variableRef="PioRegisterAddress" />
                  </ArgumentValue>
                  <ArgumentValue name="bitsToSet">
                    <VariableRef variableRef="pio.pin" />
                  </ArgumentValue>
                </SendCommandPrimitive>
              </Body>
            </Activity>
            <Activity name="ResetPinActivity">
              <Argument name="pio" type="PioHwas" />
              <Body>
                <Assignment outputVariableRef="PioRegisterAddress">
                  <VariableRef variableRef="pio.port" />
                </Assignment>
                <MathOperation outputVariableRef="PioRegisterAddress">
                  <Operator operator="add" />
                  <VariableRef variableRef="PioRegisterAddress" />
                  <Value value="52" />
                </MathOperation>
                <SendCommandPrimitive interface="RegisterHwas" command="SetPins">
                  <ArgumentValue name="register">
                    <VariableRef variableRef="PioRegisterAddress" />
                  </ArgumentValue>
                  <ArgumentValue name="bitsToSet">
                    <VariableRef variableRef="pio.pin" />
                  </ArgumentValue>
                </SendCommandPrimitive>
              </Body>
            </Activity>
          </ActivitySet>
        </Implementation>
      </Component>
    </ComponentSet>
  </Package>
</PackageFile>