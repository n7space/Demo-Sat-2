/* CIF Process (0, 0), (800, 100) */
process AfecHwasDriver;
    /* CIF Text (0, 150), (400, 500) */
    dcl Afecvar AfecHwas;
    dcl Configvar AfecHwasConfig;
    dcl Pmcvar PmcAfecHwas;
    dcl Channelvar AfecHwasChannel;
    dcl Bitstosetvar Word;
    dcl Readbitsvar Word;
    dcl Channelmaskvar WordMask;
    dcl Destinationaddressvar DestinationAddress;
    dcl Sourceaddressvar SourceAddress;
    dcl Pinmaskvar WordMask;
    dcl Choutputvar ConversionData;
    dcl Irqnumbervar InterruptNumber;
    dcl Io_afechwas_getvaluecmd_pi AfecHwasInterfaceType_GetValueCmd_Type;
    dcl Io_interruptsubscription_interrupt_pi InterruptSubscriptionInterfaceType_Interrupt_Type;
    dcl Io_afechwas_getvaluecmd_ri AfecHwasInterfaceType_GetValueCmd_TypeNotify;
    /* CIF ENDTEXT */
    /* CIF Procedure (0, 900), (800, 50) */
    procedure InitPmc;
        /* CIF Start (0, 0), (200, 75) */
        START;
            -- Assign address of PCER0 register
            /* CIF Task (0, 187), (100, 50) */
            task Pmcvar.Pmc_pcer0_offset := 1074660880;
            -- Assign address of PCER1 register
            /* CIF Task (0, 262), (100, 50) */
            task Pmcvar.Pmc_pcer1_offset := 1074661120;
            -- Assign mask of AFEC0
            /* CIF Task (0, 337), (100, 50) */
            task Pmcvar.Pmc_pcxr0_pid29_afec0_mask := 536870912;
            -- Assign mask of AFEC1
            /* CIF Task (0, 412), (100, 50) */
            task Pmcvar.Pmc_pcxr1_pid40_afec1_mask := 256;
    return;
    endprocedure;
    /* CIF Procedure (0, 975), (800, 50) */
    procedure InitAfecContainer;
        /* CIF Start (0, 0), (200, 75) */
        START;
            /* CIF Task (0, 187), (100, 50) */
            task Afecvar.Minstancemraddress := 4;
            /* CIF Task (0, 262), (100, 50) */
            task Afecvar.Minstancemraddress := Afecvar.Minstanceaddress + Afecvar.Minstancemraddress;
            /* CIF Task (0, 337), (100, 50) */
            task Afecvar.Minstanceemraddress := 8;
            /* CIF Task (0, 412), (100, 50) */
            task Afecvar.Minstanceemraddress := Afecvar.Minstanceaddress + Afecvar.Minstanceemraddress;
            /* CIF Task (0, 487), (100, 50) */
            task Afecvar.Minstancecheraddress := 20;
            /* CIF Task (0, 562), (100, 50) */
            task Afecvar.Minstancecheraddress := Afecvar.Minstanceaddress + Afecvar.Minstancecheraddress;
            /* CIF Task (0, 637), (100, 50) */
            task Afecvar.Minstancechdraddress := 24;
            /* CIF Task (0, 712), (100, 50) */
            task Afecvar.Minstancechdraddress := Afecvar.Minstanceaddress + Afecvar.Minstancechdraddress;
            /* CIF Task (0, 787), (100, 50) */
            task Afecvar.Minstancechsraddress := 28;
            /* CIF Task (0, 862), (100, 50) */
            task Afecvar.Minstancechsraddress := Afecvar.Minstanceaddress + Afecvar.Minstancechsraddress;
            /* CIF Task (0, 937), (100, 50) */
            task Afecvar.Minstancecraddress := 0;
            /* CIF Task (0, 1012), (100, 50) */
            task Afecvar.Minstancecraddress := Afecvar.Minstanceaddress + Afecvar.Minstancecraddress;
            /* CIF Task (0, 1087), (100, 50) */
            task Afecvar.Minstanceieraddress := 36;
            /* CIF Task (0, 1162), (100, 50) */
            task Afecvar.Minstanceieraddress := Afecvar.Minstanceaddress + Afecvar.Minstanceieraddress;
            /* CIF Task (0, 1237), (100, 50) */
            task Afecvar.Minstanceisraddress := 48;
            /* CIF Task (0, 1312), (100, 50) */
            task Afecvar.Minstanceisraddress := Afecvar.Minstanceaddress + Afecvar.Minstanceisraddress;
            /* CIF Task (0, 1387), (100, 50) */
            task Afecvar.Minstancelcdraddress := 32;
            /* CIF Task (0, 1462), (100, 50) */
            task Afecvar.Minstancelcdraddress := Afecvar.Minstanceaddress + Afecvar.Minstancelcdraddress;
    return;
    endprocedure;
    /* CIF Procedure (0, 1050), (800, 50) */
    procedure InitSync;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in Config AfecHwasConfig;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            -- Init PMC with definitions 
            /* CIF ProcedureCall (0, 937), (100, 50) */
            call InitPmc;
            -- Set afec instance register address
            -- Is instance equal to 0?
            /* CIF Decision (0, 937), (400, 50) */
            decision Config.Mafecinstance = AfecHwas_Instance_Afec0;
                /* CIF Answer (0, 1012), (400, 50) */
                (True):
                    /* CIF Task (0, 1087), (100, 50) */
                    task Afecvar.Minstanceaddress := 1073987584;
                    /* CIF Task (0, 1162), (100, 50) */
                    task Afecvar.Mirqnumber := 29;
                    /* CIF Join (0, 1237), (100, 50) */
                    join condition_1;
                /* CIF Answer (600, 1012), (400, 50) */
                (False):
                    -- Is instance equal to 1?
                    /* CIF Decision (600, 1012), (400, 50) */
                    decision Config.Mafecinstance = AfecHwas_Instance_Afec1;
                        /* CIF Answer (600, 1087), (400, 50) */
                        (True):
                            /* CIF Task (600, 1162), (100, 50) */
                            task Afecvar.Minstanceaddress := 1074151424;
                            /* CIF Task (600, 1237), (100, 50) */
                            task Afecvar.Mirqnumber := 40;
                            /* CIF Join (600, 1312), (100, 50) */
                            join condition_2;
                        /* CIF Answer (1200, 1087), (400, 50) */
                        (False):
                            /* CIF Join (1200, 1162), (100, 50) */
                            join condition_2;
                    enddecision;
                    /* CIF Label (1800, 1162), (100, 50) */
                    condition_2:
                    /* CIF Join (1800, 1237), (100, 50) */
                    join condition_1;
            enddecision;
            /* CIF Label (2400, 1087), (100, 50) */
            condition_1:
            -- Set the rest of the afec register addresses
            /* CIF ProcedureCall (2400, 1162), (100, 50) */
            call InitAfecContainer;
            -- Init Pmc
            -- Is instance equal to 0?
            /* CIF Decision (2400, 1162), (400, 50) */
            decision Config.Mafecinstance = AfecHwas_Instance_Afec0;
                /* CIF Answer (2400, 1237), (400, 50) */
                (True):
                    -- Assign destination register address
                    /* CIF Task (2400, 1312), (100, 50) */
                    task Destinationaddressvar := Pmcvar.Pmc_pcer0_offset;
                    -- Assign mask to variable
                    /* CIF Task (2400, 1387), (100, 50) */
                    task Pinmaskvar := Pmcvar.Pmc_pcxr0_pid29_afec0_mask;
                    -- Assign value to set to variable
                    /* CIF Task (2400, 1462), (100, 50) */
                    task Bitstosetvar := Pmcvar.Pmc_pcxr0_pid29_afec0_mask;
                    /* CIF Join (2400, 1537), (100, 50) */
                    join condition_3;
                /* CIF Answer (3000, 1237), (400, 50) */
                (False):
                    -- Is instance equal to 1?
                    /* CIF Decision (3000, 1237), (400, 50) */
                    decision Config.Mafecinstance = AfecHwas_Instance_Afec1;
                        /* CIF Answer (3000, 1312), (400, 50) */
                        (True):
                            -- Assign destination register address
                            /* CIF Task (3000, 1387), (100, 50) */
                            task Destinationaddressvar := Pmcvar.Pmc_pcer1_offset;
                            -- Assign mask to variable
                            /* CIF Task (3000, 1462), (100, 50) */
                            task Pinmaskvar := Pmcvar.Pmc_pcxr1_pid40_afec1_mask;
                            -- Assign value to set to variable
                            /* CIF Task (3000, 1537), (100, 50) */
                            task Bitstosetvar := Pmcvar.Pmc_pcxr1_pid40_afec1_mask;
                            /* CIF Join (3000, 1612), (100, 50) */
                            join condition_4;
                        /* CIF Answer (3600, 1312), (400, 50) */
                        (False):
                            /* CIF Join (3600, 1387), (100, 50) */
                            join condition_4;
                    enddecision;
                    /* CIF Label (4200, 1387), (100, 50) */
                    condition_4:
                    /* CIF Join (4200, 1462), (100, 50) */
                    join condition_3;
            enddecision;
            /* CIF Label (4800, 1312), (100, 50) */
            condition_3:
            -- Enable proper AFEC instance clock
            /* CIF ProcedureCall (4800, 1387), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, Pinmaskvar, Bitstosetvar);
            -- Calculate bits to set in AFEC MR register
            /* CIF Task (4800, 1462), (100, 50) */
            task Bitstosetvar := (8388608 + (Config.Mstartuptime * 65536)) + (Config.Mprescalervalue * 256);
            -- Assign destination register address
            /* CIF Task (4800, 1537), (100, 50) */
            task Destinationaddressvar := Afecvar.Minstancemraddress;
            -- Set mode register (startup time and prescaler value)
            /* CIF ProcedureCall (4800, 1612), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, Bitstosetvar, Bitstosetvar);
            -- Assign destination register address
            /* CIF Task (4800, 1687), (100, 50) */
            task Destinationaddressvar := Afecvar.Minstanceemraddress;
            -- Set extended mode register (tag mode). Set tag mask value (0x0100 0000)
            /* CIF ProcedureCall (4800, 1762), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, 16777216, 16777216);
    return;
    endprocedure;
    /* CIF Procedure (0, 1125), (800, 50) */
    procedure GetValue;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in Afec AfecHwas,
            in Analogchannel AfecHwasChannel;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            /* CIF Task (0, 937), (100, 50) */
            task Irqnumbervar := Afecvar.Mirqnumber;
            -- Enable Uart interrupt
            /* CIF ProcedureCall (0, 1012), (100, 50) */
            call InterruptManagement_EnableInterrupt_Ri(Irqnumbervar);
            -- Subscribe to Uart interrupt
            /* CIF ProcedureCall (0, 1087), (100, 50) */
            call InterruptSubscriptionManagement_SubscribeToInterrupt_Ri(Irqnumbervar);
            -- Calculate analogChannel mask
            /* CIF Task (0, 1162), (100, 50) */
            task Channelmaskvar := power(2, Analogchannel);
            -- Assign destination register address
            /* CIF Task (0, 1237), (100, 50) */
            task Destinationaddressvar := Afecvar.Minstancecheraddress;
            -- Enable chosen analogChannel
            /* CIF ProcedureCall (0, 1312), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, Channelmaskvar, Channelmaskvar);
            -- Assign destination register address
            /* CIF Task (0, 1387), (100, 50) */
            task Destinationaddressvar := Afecvar.Minstanceieraddress;
            -- Enable the interrupt for the given channel
            /* CIF ProcedureCall (0, 1462), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, Channelmaskvar, Channelmaskvar);
            -- Negate analogChannel mask
            /* CIF Task (0, 1537), (100, 50) */
            task Bitstosetvar := 4294967295 - Channelmaskvar;
            -- Assign destination register address
            /* CIF Task (0, 1612), (100, 50) */
            task Destinationaddressvar := Afecvar.Minstancechdraddress;
            -- Disable the rest of the channels
            /* CIF ProcedureCall (0, 1687), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, 4095, Bitstosetvar);
            -- Assign destination register address
            /* CIF Task (0, 1762), (100, 50) */
            task Destinationaddressvar := Afecvar.Minstancecraddress;
            -- Start The conversion
            /* CIF ProcedureCall (0, 1837), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, 2, 2);
    return;
    endprocedure;
    /* CIF Procedure (0, 1200), (800, 50) */
    procedure ReturnValAndDisableChannels;
        /* CIF Start (0, 0), (200, 75) */
        START;
            -- Assign source register address
            /* CIF Task (0, 187), (100, 50) */
            task Sourceaddressvar := Afecvar.Minstancelcdraddress;
            -- Read the result (value and channel)
            /* CIF ProcedureCall (0, 262), (100, 50) */
            call RawMemoryAccess_ReadWord_Ri(Sourceaddressvar, 251723775, Readbitsvar);
            -- Extract channel
            /* CIF Task (0, 337), (100, 50) */
            task Choutputvar.Mchnumber := Readbitsvar / 16777216;
            -- Extract Value
            /* CIF Task (0, 412), (100, 50) */
            task Choutputvar.Mvalue := Readbitsvar - (Choutputvar.Mchnumber * 16777216);
            -- Assign source register address
            /* CIF Task (0, 487), (100, 50) */
            task Destinationaddressvar := Afecvar.Minstancechdraddress;
            -- Disable all of the channels
            /* CIF ProcedureCall (0, 562), (100, 50) */
            call RawMemoryAccess_WriteWord_Ri(Destinationaddressvar, 4095, 4095);
            /* CIF Task (0, 637), (100, 50) */
            task Io_afechwas_getvaluecmd_ri.Choutput := Choutputvar;
            -- Return the output
            /* CIF Output (0, 712), (200, 50) */
            output AfecHwas_GetValueCmd_Ri(Io_afechwas_getvaluecmd_ri);
    return;
    endprocedure;
    /* CIF Procedure (0, 1275), (800, 50) */
    procedure IRQHandler;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in Irq InterruptNumber;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            -- Check if interrupt is comming from afec0
            /* CIF Decision (0, 862), (400, 50) */
            decision Afecvar.Mirqnumber = 29;
                /* CIF Answer (0, 937), (400, 50) */
                (True):
                    /* CIF Task (0, 1012), (100, 50) */
                    task Choutputvar.Minstance := AfecHwas_Instance_Afec0;
                    /* CIF ProcedureCall (0, 1087), (100, 50) */
                    call ReturnValAndDisableChannels;
                    /* CIF Join (0, 1162), (100, 50) */
                    join condition_1;
                /* CIF Answer (600, 937), (400, 50) */
                (False):
                    -- Check if interrupt is comming from afec1
                    /* CIF Decision (600, 937), (400, 50) */
                    decision Afecvar.Mirqnumber = 40;
                        /* CIF Answer (600, 1012), (400, 50) */
                        (True):
                            /* CIF Task (600, 1087), (100, 50) */
                            task Choutputvar.Minstance := AfecHwas_Instance_Afec1;
                            /* CIF ProcedureCall (600, 1162), (100, 50) */
                            call ReturnValAndDisableChannels;
                            /* CIF Join (600, 1237), (100, 50) */
                            join condition_2;
                        /* CIF Answer (1200, 1012), (400, 50) */
                        (False):
                            /* CIF Join (1200, 1087), (100, 50) */
                            join condition_2;
                    enddecision;
                    /* CIF Label (1800, 1087), (100, 50) */
                    condition_2:
                    /* CIF Join (1800, 1162), (100, 50) */
                    join condition_1;
            enddecision;
            /* CIF Label (2400, 1012), (100, 50) */
            condition_1:
    return;
    endprocedure;
    /* CIF Procedure (0, 1350), (800, 50) */
    procedure AfecHwas_InitInstance_Pi;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in/out Afec AfecHwas,
            in Config AfecHwasConfig;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            /* CIF Task (0, 937), (100, 50) */
            task Configvar := Config;
            /* CIF ProcedureCall (0, 1012), (100, 50) */
            call InitSync(Configvar);
            /* CIF Task (0, 1087), (100, 50) */
            task Afec := Afecvar;
    return;
    endprocedure;
    /* CIF Start (0, 1425), (200, 75) */
    START;
        /* CIF NextState (0, 1612), (200, 50) */
        NEXTSTATE Off;
    /* CIF State (0, 1687), (200, 50) */
    state Idle;
        /* CIF Input (0, 1687), (200, 50) */
        input AfecHwas_GetValueCmd_Pi(Io_afechwas_getvaluecmd_pi);
            /* CIF Task (0, 1762), (100, 50) */
            task Afecvar := Io_afechwas_getvaluecmd_pi.Afec;
            /* CIF Task (0, 1837), (100, 50) */
            task Channelvar := Io_afechwas_getvaluecmd_pi.Analogchannel;
            /* CIF ProcedureCall (0, 1912), (100, 50) */
            call GetValue(Afecvar, Channelvar);
            /* CIF NextState (0, 1987), (200, 50) */
            NEXTSTATE Idle;
        /* CIF Input (300, 1687), (200, 50) */
        input InterruptSubscription_Interrupt_Pi(Io_interruptsubscription_interrupt_pi);
            /* CIF Task (300, 1762), (100, 50) */
            task Irqnumbervar := Io_interruptsubscription_interrupt_pi.Interrupt;
            /* CIF ProcedureCall (300, 1837), (100, 50) */
            call IRQHandler(Irqnumbervar);
            /* CIF NextState (300, 1912), (200, 50) */
            NEXTSTATE Idle;
    endstate;
    /* CIF State (900, 1687), (200, 50) */
    state Off;
        /* CIF Input (900, 1687), (200, 50) */
        input AfecHwas_InitInstance_Pi;
            /* CIF NextState (900, 1762), (200, 50) */
            NEXTSTATE Idle;
    endstate;
endprocess AfecHwasDriver;
