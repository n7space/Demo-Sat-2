pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");



package COM_N7SPACE_HWAS with SPARK_Mode
is


subtype asn1SccInterruptNumber is adaasn1rtl.Asn1UInt range 0 .. 255;


function asn1SccInterruptNumber_Equal(val1, val2 : asn1SccInterruptNumber) return Boolean;

function asn1SccInterruptNumber_Init return asn1SccInterruptNumber;

ERR_INTERRUPTNUMBER:constant Integer := 136; 
function asn1SccInterruptNumber_IsConstraintValid(val : asn1SccInterruptNumber) return adaasn1rtl.ASN1_RESULT;
-- asn1SccInterrupt_Type --------------------------------------------
subtype asn1SccInterrupt_Type_interrupt is asn1SccInterruptNumber range 0 .. 255;


type asn1SccInterrupt_Type is record 
    interrupt : asn1SccInterrupt_Type_interrupt;
end record;


function asn1SccInterrupt_Type_interrupt_Equal(val1, val2 : asn1SccInterrupt_Type_interrupt) return Boolean;

function asn1SccInterrupt_Type_Equal(val1, val2 : asn1SccInterrupt_Type) return Boolean;

function asn1SccInterrupt_Type_interrupt_Init return asn1SccInterrupt_Type_interrupt;
function asn1SccInterrupt_Type_Init return asn1SccInterrupt_Type;

ERR_INTERRUPT_TYPE:constant Integer := 161; 
ERR_INTERRUPT_TYPE_INTERRUPT:constant Integer := 156; 
function asn1SccInterrupt_Type_IsConstraintValid(val : asn1SccInterrupt_Type) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccByte is adaasn1rtl.Asn1UInt range 0 .. 255;


function asn1SccByte_Equal(val1, val2 : asn1SccByte) return Boolean;

function asn1SccByte_Init return asn1SccByte;

ERR_BYTE:constant Integer := 141; 
function asn1SccByte_IsConstraintValid(val : asn1SccByte) return adaasn1rtl.ASN1_RESULT;
-- asn1SccByteBuffer --------------------------------------------

subtype asn1SccByteBuffer_elem is asn1SccByte range 0 .. 255;


subtype asn1SccByteBuffer_index is Integer range 1..65535;
type asn1SccByteBuffer_array is array (asn1SccByteBuffer_index) of asn1SccByteBuffer_elem;
subtype asn1SccByteBuffer_length_index is Integer range 0..65535;
type asn1SccByteBuffer is  record
    Length : asn1SccByteBuffer_length_index;
    Data  : asn1SccByteBuffer_array;
end record;

function asn1SccByteBuffer_elem_Equal(val1, val2 : asn1SccByteBuffer_elem) return Boolean;

function asn1SccByteBuffer_Equal(val1, val2 : asn1SccByteBuffer) return Boolean;

function asn1SccByteBuffer_elem_Init return asn1SccByteBuffer_elem;
function asn1SccByteBuffer_Init return asn1SccByteBuffer;

ERR_BYTEBUFFER:constant Integer := 151; 
ERR_BYTEBUFFER_ELM:constant Integer := 146; 
function asn1SccByteBuffer_IsConstraintValid(val : asn1SccByteBuffer) return adaasn1rtl.ASN1_RESULT;
pragma Warnings (Off, "there are no others");
 
pragma Warnings (On, "there are no others");
private
   --# hide COM_N7SPACE_HWAS;


end COM_N7SPACE_HWAS;