pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");
pragma Warnings (On, "redundant with clause in body");

package body COM_N7SPACE_AFECHWAS with SPARK_Mode is



pragma Warnings (Off, "condition can only be False if invalid values present");
pragma Warnings (Off, "condition can only be True if invalid values present");


function asn1SccDestinationAddress_Equal (val1, val2 :  asn1SccDestinationAddress) return Boolean
is

begin
	return val1 = val2;

end asn1SccDestinationAddress_Equal;

function asn1SccDestinationAddress_Init return asn1SccDestinationAddress
is
    val: asn1SccDestinationAddress;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccDestinationAddress_Init;

function asn1SccDestinationAddress_IsConstraintValid(val : asn1SccDestinationAddress) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 4294967295);
    ret.ErrorCode := (if ret.Success then 0 else ERR_DESTINATIONADDRESS);
    return ret;
end asn1SccDestinationAddress_IsConstraintValid;



function asn1SccAfecHwas_mInstanceAddress_Equal (val1, val2 :  asn1SccAfecHwas_mInstanceAddress) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwas_mInstanceAddress_Equal;

function asn1SccAfecHwas_mInstanceMrAddress_Equal (val1, val2 :  asn1SccAfecHwas_mInstanceMrAddress) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwas_mInstanceMrAddress_Equal;

function asn1SccAfecHwas_mInstanceEmrAddress_Equal (val1, val2 :  asn1SccAfecHwas_mInstanceEmrAddress) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwas_mInstanceEmrAddress_Equal;

function asn1SccAfecHwas_mInstanceChdrAddress_Equal (val1, val2 :  asn1SccAfecHwas_mInstanceChdrAddress) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwas_mInstanceChdrAddress_Equal;

function asn1SccAfecHwas_mInstanceCherAddress_Equal (val1, val2 :  asn1SccAfecHwas_mInstanceCherAddress) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwas_mInstanceCherAddress_Equal;

function asn1SccAfecHwas_mInstanceChsrAddress_Equal (val1, val2 :  asn1SccAfecHwas_mInstanceChsrAddress) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwas_mInstanceChsrAddress_Equal;

function asn1SccAfecHwas_mInstanceCrAddress_Equal (val1, val2 :  asn1SccAfecHwas_mInstanceCrAddress) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwas_mInstanceCrAddress_Equal;

function asn1SccAfecHwas_mInstanceIsrAddress_Equal (val1, val2 :  asn1SccAfecHwas_mInstanceIsrAddress) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwas_mInstanceIsrAddress_Equal;

function asn1SccAfecHwas_mInstanceLcdrAddress_Equal (val1, val2 :  asn1SccAfecHwas_mInstanceLcdrAddress) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwas_mInstanceLcdrAddress_Equal;

function asn1SccAfecHwas_Equal (val1, val2 :  asn1SccAfecHwas) return Boolean
is
    pragma Warnings (Off, "initialization of ret has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ret has no effect");

begin
    ret := asn1SccAfecHwas_mInstanceAddress_Equal(val1.mInstanceAddress, val2.mInstanceAddress);

    if ret then
        ret := asn1SccAfecHwas_mInstanceMrAddress_Equal(val1.mInstanceMrAddress, val2.mInstanceMrAddress);

        if ret then
            ret := asn1SccAfecHwas_mInstanceEmrAddress_Equal(val1.mInstanceEmrAddress, val2.mInstanceEmrAddress);

            if ret then
                ret := asn1SccAfecHwas_mInstanceChdrAddress_Equal(val1.mInstanceChdrAddress, val2.mInstanceChdrAddress);

                if ret then
                    ret := asn1SccAfecHwas_mInstanceCherAddress_Equal(val1.mInstanceCherAddress, val2.mInstanceCherAddress);

                    if ret then
                        ret := asn1SccAfecHwas_mInstanceChsrAddress_Equal(val1.mInstanceChsrAddress, val2.mInstanceChsrAddress);

                        if ret then
                            ret := asn1SccAfecHwas_mInstanceCrAddress_Equal(val1.mInstanceCrAddress, val2.mInstanceCrAddress);

                            if ret then
                                ret := asn1SccAfecHwas_mInstanceIsrAddress_Equal(val1.mInstanceIsrAddress, val2.mInstanceIsrAddress);

                                if ret then
                                    ret := asn1SccAfecHwas_mInstanceLcdrAddress_Equal(val1.mInstanceLcdrAddress, val2.mInstanceLcdrAddress);

                                end if;
                            end if;
                        end if;
                    end if;
                end if;
            end if;
        end if;
    end if;
	return ret;

end asn1SccAfecHwas_Equal;

function asn1SccAfecHwas_mInstanceAddress_Init return asn1SccAfecHwas_mInstanceAddress
is
    val: asn1SccAfecHwas_mInstanceAddress;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_mInstanceAddress_Init;
function asn1SccAfecHwas_mInstanceMrAddress_Init return asn1SccAfecHwas_mInstanceMrAddress
is
    val: asn1SccAfecHwas_mInstanceMrAddress;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_mInstanceMrAddress_Init;
function asn1SccAfecHwas_mInstanceEmrAddress_Init return asn1SccAfecHwas_mInstanceEmrAddress
is
    val: asn1SccAfecHwas_mInstanceEmrAddress;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_mInstanceEmrAddress_Init;
function asn1SccAfecHwas_mInstanceChdrAddress_Init return asn1SccAfecHwas_mInstanceChdrAddress
is
    val: asn1SccAfecHwas_mInstanceChdrAddress;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_mInstanceChdrAddress_Init;
function asn1SccAfecHwas_mInstanceCherAddress_Init return asn1SccAfecHwas_mInstanceCherAddress
is
    val: asn1SccAfecHwas_mInstanceCherAddress;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_mInstanceCherAddress_Init;
function asn1SccAfecHwas_mInstanceChsrAddress_Init return asn1SccAfecHwas_mInstanceChsrAddress
is
    val: asn1SccAfecHwas_mInstanceChsrAddress;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_mInstanceChsrAddress_Init;
function asn1SccAfecHwas_mInstanceCrAddress_Init return asn1SccAfecHwas_mInstanceCrAddress
is
    val: asn1SccAfecHwas_mInstanceCrAddress;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_mInstanceCrAddress_Init;
function asn1SccAfecHwas_mInstanceIsrAddress_Init return asn1SccAfecHwas_mInstanceIsrAddress
is
    val: asn1SccAfecHwas_mInstanceIsrAddress;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_mInstanceIsrAddress_Init;
function asn1SccAfecHwas_mInstanceLcdrAddress_Init return asn1SccAfecHwas_mInstanceLcdrAddress
is
    val: asn1SccAfecHwas_mInstanceLcdrAddress;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_mInstanceLcdrAddress_Init;
function asn1SccAfecHwas_Init return asn1SccAfecHwas
is
    val: asn1SccAfecHwas;
begin

    --set mInstanceAddress 
    val.mInstanceAddress := asn1SccAfecHwas_mInstanceAddress_Init;
    --set mInstanceMrAddress 
    val.mInstanceMrAddress := asn1SccAfecHwas_mInstanceMrAddress_Init;
    --set mInstanceEmrAddress 
    val.mInstanceEmrAddress := asn1SccAfecHwas_mInstanceEmrAddress_Init;
    --set mInstanceChdrAddress 
    val.mInstanceChdrAddress := asn1SccAfecHwas_mInstanceChdrAddress_Init;
    --set mInstanceCherAddress 
    val.mInstanceCherAddress := asn1SccAfecHwas_mInstanceCherAddress_Init;
    --set mInstanceChsrAddress 
    val.mInstanceChsrAddress := asn1SccAfecHwas_mInstanceChsrAddress_Init;
    --set mInstanceCrAddress 
    val.mInstanceCrAddress := asn1SccAfecHwas_mInstanceCrAddress_Init;
    --set mInstanceIsrAddress 
    val.mInstanceIsrAddress := asn1SccAfecHwas_mInstanceIsrAddress_Init;
    --set mInstanceLcdrAddress 
    val.mInstanceLcdrAddress := asn1SccAfecHwas_mInstanceLcdrAddress_Init;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_Init;

function asn1SccAfecHwas_IsConstraintValid(val : asn1SccAfecHwas) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val.mInstanceAddress <= 4294967295);
    if ret.Success then
        ret.Success := (val.mInstanceAddress <= 4294967295);
    end if;
    ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWAS_MINSTANCEADDRESS);
    if ret.Success then
        ret.Success := (val.mInstanceMrAddress <= 4294967295);
        if ret.Success then
            ret.Success := (val.mInstanceMrAddress <= 4294967295);
        end if;
        ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWAS_MINSTANCEMRADDRESS);
        if ret.Success then
            ret.Success := (val.mInstanceEmrAddress <= 4294967295);
            if ret.Success then
                ret.Success := (val.mInstanceEmrAddress <= 4294967295);
            end if;
            ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWAS_MINSTANCEEMRADDRESS);
            if ret.Success then
                ret.Success := (val.mInstanceChdrAddress <= 4294967295);
                if ret.Success then
                    ret.Success := (val.mInstanceChdrAddress <= 4294967295);
                end if;
                ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWAS_MINSTANCECHDRADDRESS);
                if ret.Success then
                    ret.Success := (val.mInstanceCherAddress <= 4294967295);
                    if ret.Success then
                        ret.Success := (val.mInstanceCherAddress <= 4294967295);
                    end if;
                    ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWAS_MINSTANCECHERADDRESS);
                    if ret.Success then
                        ret.Success := (val.mInstanceChsrAddress <= 4294967295);
                        if ret.Success then
                            ret.Success := (val.mInstanceChsrAddress <= 4294967295);
                        end if;
                        ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWAS_MINSTANCECHSRADDRESS);
                        if ret.Success then
                            ret.Success := (val.mInstanceCrAddress <= 4294967295);
                            if ret.Success then
                                ret.Success := (val.mInstanceCrAddress <= 4294967295);
                            end if;
                            ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWAS_MINSTANCECRADDRESS);
                            if ret.Success then
                                ret.Success := (val.mInstanceIsrAddress <= 4294967295);
                                if ret.Success then
                                    ret.Success := (val.mInstanceIsrAddress <= 4294967295);
                                end if;
                                ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWAS_MINSTANCEISRADDRESS);
                                if ret.Success then
                                    ret.Success := (val.mInstanceLcdrAddress <= 4294967295);
                                    if ret.Success then
                                        ret.Success := (val.mInstanceLcdrAddress <= 4294967295);
                                    end if;
                                    ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWAS_MINSTANCELCDRADDRESS);
                                end if;
                            end if;
                        end if;
                    end if;
                end if;
            end if;
        end if;
    end if;
    return ret;
end asn1SccAfecHwas_IsConstraintValid;



function asn1SccSourceAddress_Equal (val1, val2 :  asn1SccSourceAddress) return Boolean
is

begin
	return val1 = val2;

end asn1SccSourceAddress_Equal;

function asn1SccSourceAddress_Init return asn1SccSourceAddress
is
    val: asn1SccSourceAddress;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccSourceAddress_Init;

function asn1SccSourceAddress_IsConstraintValid(val : asn1SccSourceAddress) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 4294967295);
    ret.ErrorCode := (if ret.Success then 0 else ERR_SOURCEADDRESS);
    return ret;
end asn1SccSourceAddress_IsConstraintValid;



function asn1SccWord_Equal (val1, val2 :  asn1SccWord) return Boolean
is

begin
	return val1 = val2;

end asn1SccWord_Equal;

function asn1SccWord_Init return asn1SccWord
is
    val: asn1SccWord;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccWord_Init;

function asn1SccWord_IsConstraintValid(val : asn1SccWord) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 4294967295);
    ret.ErrorCode := (if ret.Success then 0 else ERR_WORD);
    return ret;
end asn1SccWord_IsConstraintValid;



function asn1SccWordMask_Equal (val1, val2 :  asn1SccWordMask) return Boolean
is

begin
	return val1 = val2;

end asn1SccWordMask_Equal;

function asn1SccWordMask_Init return asn1SccWordMask
is
    val: asn1SccWordMask;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccWordMask_Init;

function asn1SccWordMask_IsConstraintValid(val : asn1SccWordMask) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 4294967295);
    ret.ErrorCode := (if ret.Success then 0 else ERR_WORDMASK);
    return ret;
end asn1SccWordMask_IsConstraintValid;



function asn1SccPmcHwas_pMC_PCER0_OFFSET_Equal (val1, val2 :  asn1SccPmcHwas_pMC_PCER0_OFFSET) return Boolean
is

begin
	return val1 = val2;

end asn1SccPmcHwas_pMC_PCER0_OFFSET_Equal;

function asn1SccPmcHwas_pMC_PCER1_OFFSET_Equal (val1, val2 :  asn1SccPmcHwas_pMC_PCER1_OFFSET) return Boolean
is

begin
	return val1 = val2;

end asn1SccPmcHwas_pMC_PCER1_OFFSET_Equal;

function asn1SccPmcHwas_pMC_PCxR0_PID29_AFEC0_MASK_Equal (val1, val2 :  asn1SccPmcHwas_pMC_PCxR0_PID29_AFEC0_MASK) return Boolean
is

begin
	return val1 = val2;

end asn1SccPmcHwas_pMC_PCxR0_PID29_AFEC0_MASK_Equal;

function asn1SccPmcHwas_pMC_PCxR1_PID40_AFEC1_MASK_Equal (val1, val2 :  asn1SccPmcHwas_pMC_PCxR1_PID40_AFEC1_MASK) return Boolean
is

begin
	return val1 = val2;

end asn1SccPmcHwas_pMC_PCxR1_PID40_AFEC1_MASK_Equal;

function asn1SccPmcHwas_Equal (val1, val2 :  asn1SccPmcHwas) return Boolean
is
    pragma Warnings (Off, "initialization of ret has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ret has no effect");

begin
    ret := asn1SccPmcHwas_pMC_PCER0_OFFSET_Equal(val1.pMC_PCER0_OFFSET, val2.pMC_PCER0_OFFSET);

    if ret then
        ret := asn1SccPmcHwas_pMC_PCER1_OFFSET_Equal(val1.pMC_PCER1_OFFSET, val2.pMC_PCER1_OFFSET);

        if ret then
            ret := asn1SccPmcHwas_pMC_PCxR0_PID29_AFEC0_MASK_Equal(val1.pMC_PCxR0_PID29_AFEC0_MASK, val2.pMC_PCxR0_PID29_AFEC0_MASK);

            if ret then
                ret := asn1SccPmcHwas_pMC_PCxR1_PID40_AFEC1_MASK_Equal(val1.pMC_PCxR1_PID40_AFEC1_MASK, val2.pMC_PCxR1_PID40_AFEC1_MASK);

            end if;
        end if;
    end if;
	return ret;

end asn1SccPmcHwas_Equal;

function asn1SccPmcHwas_pMC_PCER0_OFFSET_Init return asn1SccPmcHwas_pMC_PCER0_OFFSET
is
    val: asn1SccPmcHwas_pMC_PCER0_OFFSET;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccPmcHwas_pMC_PCER0_OFFSET_Init;
function asn1SccPmcHwas_pMC_PCER1_OFFSET_Init return asn1SccPmcHwas_pMC_PCER1_OFFSET
is
    val: asn1SccPmcHwas_pMC_PCER1_OFFSET;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccPmcHwas_pMC_PCER1_OFFSET_Init;
function asn1SccPmcHwas_pMC_PCxR0_PID29_AFEC0_MASK_Init return asn1SccPmcHwas_pMC_PCxR0_PID29_AFEC0_MASK
is
    val: asn1SccPmcHwas_pMC_PCxR0_PID29_AFEC0_MASK;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccPmcHwas_pMC_PCxR0_PID29_AFEC0_MASK_Init;
function asn1SccPmcHwas_pMC_PCxR1_PID40_AFEC1_MASK_Init return asn1SccPmcHwas_pMC_PCxR1_PID40_AFEC1_MASK
is
    val: asn1SccPmcHwas_pMC_PCxR1_PID40_AFEC1_MASK;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccPmcHwas_pMC_PCxR1_PID40_AFEC1_MASK_Init;
function asn1SccPmcHwas_Init return asn1SccPmcHwas
is
    val: asn1SccPmcHwas;
begin

    --set pMC_PCER0_OFFSET 
    val.pMC_PCER0_OFFSET := asn1SccPmcHwas_pMC_PCER0_OFFSET_Init;
    --set pMC_PCER1_OFFSET 
    val.pMC_PCER1_OFFSET := asn1SccPmcHwas_pMC_PCER1_OFFSET_Init;
    --set pMC_PCxR0_PID29_AFEC0_MASK 
    val.pMC_PCxR0_PID29_AFEC0_MASK := asn1SccPmcHwas_pMC_PCxR0_PID29_AFEC0_MASK_Init;
    --set pMC_PCxR1_PID40_AFEC1_MASK 
    val.pMC_PCxR1_PID40_AFEC1_MASK := asn1SccPmcHwas_pMC_PCxR1_PID40_AFEC1_MASK_Init;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccPmcHwas_Init;

function asn1SccPmcHwas_IsConstraintValid(val : asn1SccPmcHwas) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val.pMC_PCER0_OFFSET <= 4294967295);
    if ret.Success then
        ret.Success := (val.pMC_PCER0_OFFSET <= 4294967295);
    end if;
    ret.ErrorCode := (if ret.Success then 0 else ERR_PMCHWAS_PMC_PCER0_OFFSET);
    if ret.Success then
        ret.Success := (val.pMC_PCER1_OFFSET <= 4294967295);
        if ret.Success then
            ret.Success := (val.pMC_PCER1_OFFSET <= 4294967295);
        end if;
        ret.ErrorCode := (if ret.Success then 0 else ERR_PMCHWAS_PMC_PCER1_OFFSET);
        if ret.Success then
            ret.Success := (val.pMC_PCxR0_PID29_AFEC0_MASK <= 4294967295);
            if ret.Success then
                ret.Success := (val.pMC_PCxR0_PID29_AFEC0_MASK <= 4294967295);
            end if;
            ret.ErrorCode := (if ret.Success then 0 else ERR_PMCHWAS_PMC_PCXR0_PID29_AFEC0_MASK);
            if ret.Success then
                ret.Success := (val.pMC_PCxR1_PID40_AFEC1_MASK <= 4294967295);
                if ret.Success then
                    ret.Success := (val.pMC_PCxR1_PID40_AFEC1_MASK <= 4294967295);
                end if;
                ret.ErrorCode := (if ret.Success then 0 else ERR_PMCHWAS_PMC_PCXR1_PID40_AFEC1_MASK);
            end if;
        end if;
    end if;
    return ret;
end asn1SccPmcHwas_IsConstraintValid;



function asn1SccAfecHwas_Instance_Equal (val1, val2 :  asn1SccAfecHwas_Instance) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwas_Instance_Equal;

function asn1SccAfecHwas_Instance_Init return asn1SccAfecHwas_Instance
is
    val: asn1SccAfecHwas_Instance;
begin
    val := asn1SccafecHwas_Instance_Afec0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_Instance_Init;

function asn1SccAfecHwas_Instance_IsConstraintValid(val : asn1SccAfecHwas_Instance) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (((val = asn1SccafecHwas_Instance_Afec0)) OR ((val = asn1SccafecHwas_Instance_Afec1)));
    ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWAS_INSTANCE);
    return ret;
end asn1SccAfecHwas_Instance_IsConstraintValid;



function asn1SccAfecHwas_StartupTime_Equal (val1, val2 :  asn1SccAfecHwas_StartupTime) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwas_StartupTime_Equal;

function asn1SccAfecHwas_StartupTime_Init return asn1SccAfecHwas_StartupTime
is
    val: asn1SccAfecHwas_StartupTime;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwas_StartupTime_Init;

function asn1SccAfecHwas_StartupTime_IsConstraintValid(val : asn1SccAfecHwas_StartupTime) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 15);
    ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWAS_STARTUPTIME);
    return ret;
end asn1SccAfecHwas_StartupTime_IsConstraintValid;



function asn1SccAfecHwasConfig_mStartupTime_Equal (val1, val2 :  asn1SccAfecHwasConfig_mStartupTime) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwasConfig_mStartupTime_Equal;

function asn1SccAfecHwasConfig_mPrescalerValue_Equal (val1, val2 :  asn1SccAfecHwasConfig_mPrescalerValue) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwasConfig_mPrescalerValue_Equal;

function asn1SccAfecHwasConfig_Equal (val1, val2 :  asn1SccAfecHwasConfig) return Boolean
is
    pragma Warnings (Off, "initialization of ret has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ret has no effect");

begin
    ret := (val1.mAfecInstance = val2.mAfecInstance);

    if ret then
        ret := asn1SccAfecHwasConfig_mStartupTime_Equal(val1.mStartupTime, val2.mStartupTime);

        if ret then
            ret := asn1SccAfecHwasConfig_mPrescalerValue_Equal(val1.mPrescalerValue, val2.mPrescalerValue);

        end if;
    end if;
	return ret;

end asn1SccAfecHwasConfig_Equal;

function asn1SccAfecHwasConfig_mStartupTime_Init return asn1SccAfecHwasConfig_mStartupTime
is
    val: asn1SccAfecHwasConfig_mStartupTime;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwasConfig_mStartupTime_Init;
function asn1SccAfecHwasConfig_mPrescalerValue_Init return asn1SccAfecHwasConfig_mPrescalerValue
is
    val: asn1SccAfecHwasConfig_mPrescalerValue;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwasConfig_mPrescalerValue_Init;
function asn1SccAfecHwasConfig_Init return asn1SccAfecHwasConfig
is
    val: asn1SccAfecHwasConfig;
begin

    --set mAfecInstance 
    val.mAfecInstance := asn1SccAfecHwas_Instance_Init;
    --set mStartupTime 
    val.mStartupTime := asn1SccAfecHwasConfig_mStartupTime_Init;
    --set mPrescalerValue 
    val.mPrescalerValue := asn1SccAfecHwasConfig_mPrescalerValue_Init;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwasConfig_Init;

function asn1SccAfecHwasConfig_IsConstraintValid(val : asn1SccAfecHwasConfig) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret := asn1SccAfecHwas_Instance_IsConstraintValid(val.mAfecInstance);
    if ret.Success then
        ret.Success := (val.mStartupTime <= 15);
        if ret.Success then
            ret.Success := (val.mStartupTime <= 15);
        end if;
        ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWASCONFIG_MSTARTUPTIME);
        if ret.Success then
            ret.Success := (val.mPrescalerValue <= 4294967295);
            if ret.Success then
                ret.Success := (val.mPrescalerValue <= 4294967295);
            end if;
            ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWASCONFIG_MPRESCALERVALUE);
        end if;
    end if;
    return ret;
end asn1SccAfecHwasConfig_IsConstraintValid;



function asn1SccAfecHwasChannel_Equal (val1, val2 :  asn1SccAfecHwasChannel) return Boolean
is

begin
	return val1 = val2;

end asn1SccAfecHwasChannel_Equal;

function asn1SccAfecHwasChannel_Init return asn1SccAfecHwasChannel
is
    val: asn1SccAfecHwasChannel;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAfecHwasChannel_Init;

function asn1SccAfecHwasChannel_IsConstraintValid(val : asn1SccAfecHwasChannel) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 15);
    ret.ErrorCode := (if ret.Success then 0 else ERR_AFECHWASCHANNEL);
    return ret;
end asn1SccAfecHwasChannel_IsConstraintValid;


pragma Warnings (On, "condition can only be False if invalid values present");
pragma Warnings (On, "condition can only be True if invalid values present");

 
end COM_N7SPACE_AFECHWAS;