/* CIF PROCESS (250, 150), (150, 75) */
process Manager;
    state ActiveMode;
    substructure
            /* CIF START (233, 39), (70, 35) */
            START;
                /* CIF task (196, 94), (143, 35) */
                task m_mode := m_active;
                /* CIF PROCEDURECALL (154, 149), (228, 35) */
                call ObjectDetection_SetEnabled(true);
                /* CIF NEXTSTATE (233, 204), (70, 35) */
                NEXTSTATE Inited;
            /* CIF state (356, 29), (70, 35) */
            state Inited;
            endstate;
    endsubstructure;
    state SafeMode;
    substructure
            /* CIF START (233, 20), (70, 35) */
            START;
                /* CIF task (201, 75), (133, 35) */
                task m_mode := m_safe;
                /* CIF PROCEDURECALL (152, 130), (231, 35) */
                call ObjectDetection_SetEnabled(false);
                /* CIF PROCEDURECALL (61, 180), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(0, propulsion_ThrusterState_Off);
                /* CIF PROCEDURECALL (61, 235), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(1, propulsion_ThrusterState_Off);
                /* CIF PROCEDURECALL (61, 290), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(2, propulsion_ThrusterState_Off);
                /* CIF PROCEDURECALL (61, 345), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(3, propulsion_ThrusterState_Off);
                /* CIF NEXTSTATE (233, 403), (70, 35) */
                NEXTSTATE Inited;
            /* CIF state (401, 26), (70, 35) */
            state Inited;
            endstate;
    endsubstructure;
    state IdleMode;
    substructure
            /* CIF START (233, 20), (70, 35) */
            START;
                /* CIF task (202, 75), (130, 35) */
                task m_mode := m_idle;
                /* CIF PROCEDURECALL (152, 130), (231, 35) */
                call ObjectDetection_SetEnabled(false);
                /* CIF PROCEDURECALL (61, 180), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(0, propulsion_ThrusterState_Off);
                /* CIF PROCEDURECALL (61, 235), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(1, propulsion_ThrusterState_Off);
                /* CIF PROCEDURECALL (61, 290), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(2, propulsion_ThrusterState_Off);
                /* CIF PROCEDURECALL (61, 345), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(3, propulsion_ThrusterState_Off);
                /* CIF NEXTSTATE (233, 403), (70, 35) */
                NEXTSTATE Inited;
            /* CIF state (401, 26), (70, 35) */
            state Inited;
            endstate;
    endsubstructure;
    state PassiveMode;
    substructure
            /* CIF START (233, 37), (70, 35) */
            START;
                /* CIF task (192, 92), (151, 35) */
                task m_mode := m_passive;
                /* CIF PROCEDURECALL (154, 147), (228, 35) */
                call ObjectDetection_SetEnabled(true);
                /* CIF PROCEDURECALL (61, 197), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(0, propulsion_ThrusterState_Off);
                /* CIF PROCEDURECALL (61, 252), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(1, propulsion_ThrusterState_Off);
                /* CIF PROCEDURECALL (61, 307), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(2, propulsion_ThrusterState_Off);
                /* CIF PROCEDURECALL (61, 362), (413, 35) */
                call Propulsion_ChangeStateCmd_Pi(3, propulsion_ThrusterState_Off);
                /* CIF NEXTSTATE (233, 412), (70, 35) */
                NEXTSTATE Inited;
            /* CIF state (403, 48), (70, 35) */
            state Inited;
            endstate;
    endsubstructure;
    /* CIF TEXT (340, 25), (299, 248) */
    DCL m_mode TMode := m_idle;
    DCL m_tc TTC;
    DCL m_tm TTM;
    DCL m_hk THouseKeepingReport;
    DCL m_sunReport TSunMonitoringReport;
    DCL m_objectReport TObjectDetectionReport;
    DCL m_power0 TPower;
    DCL m_power1 TPower;
    DCL m_power2 TPower;
    DCL m_power3 TPower;
    DCL m_sunThreshold TLuminance;
    DCL m_distanceThreshold TDistance;
    DCL m_propulsionConfig PropulsionConfig;
    DCL m_propulsion Propulsion;
    DCL m_sun SunSensor;
    DCL m_sunConfig  SunSensorConfig;
    /* CIF ENDTEXT */
    /* CIF procedure (361, 807), (91, 35) */
    procedure InitializeHw;
        /* CIF START (531, 33), (70, 35) */
        START;
            /* CIF task (90, 88), (951, 35) */
            task m_propulsionConfig(0) :=  {mPortConfig PioHwas_Port_B, mPinConfig 3, mDirectionConfig PioHwas_Direction_Output, mControlConfig PioHwas_Control_Pio};
            /* CIF task (90, 143), (951, 35) */
            task m_propulsionConfig(1) :=  {mPortConfig PioHwas_Port_B, mPinConfig 2, mDirectionConfig PioHwas_Direction_Output, mControlConfig PioHwas_Control_Pio};
            /* CIF task (86, 198), (959, 35) */
            task m_propulsionConfig(2) :=  {mPortConfig PioHwas_Port_B, mPinConfig 13, mDirectionConfig PioHwas_Direction_Output, mControlConfig PioHwas_Control_Pio};
            /* CIF task (86, 253), (959, 35) */
            task m_propulsionConfig(3) :=  {mPortConfig PioHwas_Port_D, mPinConfig 24, mDirectionConfig PioHwas_Direction_Output, mControlConfig PioHwas_Control_Pio};
            /* CIF PROCEDURECALL (348, 308), (434, 35) */
            call Propulsion_InitPropulsionCmd_Pi(m_propulsion, m_propulsionConfig);
            /* CIF task (174, 363), (782, 35) */
            task m_sunConfig := {mAfecConfig {mAfecInstance AfecHwas_Instance_Afec0 , mStartupTime 15, mPrescalerValue 255  }, mChannel 8};
            /* CIF PROCEDURECALL (392, 418), (346, 35) */
            call SunSensor_InitSunSensorCmd_Pi(m_sunConfig, m_sun);
            /* CIF return (548, 468), (35, 35) */
            return ;
    endprocedure;
    /* CIF procedure (365, 740), (74, 35) */
    procedure ToPower;
        /* CIF TEXT (100, 32), (226, 140) */
        fpar
        in x Tpower;
        returns Propulsion_ThrusterState;
        /* CIF ENDTEXT */
        /* CIF START (414, 178), (70, 35) */
        START;
            /* CIF decision (414, 233), (70, 50) */
            decision x;
                /* CIF ANSWER (92, 303), (70, 23) */
                (< 0.25):
                    /* CIF return (109, 346), (35, 35) */
                    return propulsion_ThrusterState_Off;
                /* CIF ANSWER (287, 303), (70, 23) */
                (>= 0.75):
                    /* CIF return (304, 346), (35, 35) */
                    return propulsion_ThrusterState_On;
                /* CIF ANSWER (619, 303), (70, 23) */
                else:
                    /* CIF decision (619, 346), (70, 50) */
                    decision x;
                        /* CIF ANSWER (498, 416), (70, 23) */
                        (< 0.5):
                            /* CIF return (515, 459), (35, 35) */
                            return propulsion_ThrusterState_BlinkLow;
                        /* CIF ANSWER (729, 416), (70, 23) */
                        else:
                            /* CIF return (746, 459), (35, 35) */
                            return propulsion_ThrusterState_BlinkHigh;
                    enddecision;
            enddecision;
    endprocedure;
    /* CIF procedure (365, 670), (126, 35) */
    procedure SetEnginesPower;
        /* CIF START (409, 81), (70, 35) */
        START;
            /* CIF decision (290, 136), (307, 50) */
            decision m_objectreport.distance < m_distanceThreshold;
                /* CIF ANSWER (730, 206), (70, 23) */
                (false):
                    /* CIF task (550, 249), (428, 35) */
                    task m_power0 := 0.0, m_power1 := 0.0, m_power2 := 0.0, m_power3 := 0.0;
                    /* CIF PROCEDURECALL (558, 304), (413, 35) */
                    call Propulsion_ChangeStateCmd_Pi(0, propulsion_ThrusterState_Off);
                    /* CIF PROCEDURECALL (558, 359), (413, 35) */
                    call Propulsion_ChangeStateCmd_Pi(1, propulsion_ThrusterState_Off);
                    /* CIF PROCEDURECALL (558, 414), (413, 35) */
                    call Propulsion_ChangeStateCmd_Pi(2, propulsion_ThrusterState_Off);
                    /* CIF PROCEDURECALL (558, 469), (413, 35) */
                    call Propulsion_ChangeStateCmd_Pi(3, propulsion_ThrusterState_Off);
                /* CIF ANSWER (229, 206), (70, 23) */
                (true):
                    /* CIF task (93, 249), (341, 35) */
                    task m_power0 := Peak(m_objectreport.position, -0.75, 0.5);
                    /* CIF task (93, 304), (341, 35) */
                    task m_power1 := Peak(m_objectreport.position, -0.25, 0.5);
                    /* CIF task (95, 359), (337, 35) */
                    task m_power2 := Peak(m_objectreport.position, 0.25, 0.5);
                    /* CIF task (95, 414), (337, 35) */
                    task m_power3 := Peak(m_objectreport.position, 0.75, 0.5);
                    /* CIF PROCEDURECALL (85, 464), (357, 35) */
                    call Propulsion_ChangeStateCmd_Pi(0, ToPower(m_power0));
                    /* CIF PROCEDURECALL (85, 519), (357, 35) */
                    call Propulsion_ChangeStateCmd_Pi(1, ToPower(m_power1));
                    /* CIF PROCEDURECALL (85, 574), (357, 35) */
                    call Propulsion_ChangeStateCmd_Pi(2, ToPower(m_power2));
                    /* CIF PROCEDURECALL (85, 629), (357, 35) */
                    call Propulsion_ChangeStateCmd_Pi(3, ToPower(m_power3));
            enddecision;
            /* CIF return (426, 680), (35, 35) */
            return ;
    endprocedure;
    /* CIF procedure (363, 611), (245, 35) */
    procedure SunSensorReturn_ReturnDataCmd_Ri;
        /* CIF TEXT (447, 79), (217, 140) */
        fpar
            in     Choutput ConversionData;
        /* CIF ENDTEXT */
        /* CIF START (628, 237), (70, 35) */
        START;
            /* CIF task (413, 292), (498, 35) */
            task m_sunReport := {luminance float(choutput.mValue) / 500000000.0, status vs_ok };
            /* CIF return (645, 342), (35, 35) */
            return ;
    endprocedure;
    /* CIF procedure (374, 879), (70, 35) */
    procedure Peak;
        /* CIF TEXT (347, 163), (170, 140) */
        fpar
        in x TAngularPosition,
        in p TAngularPosition,
        in s TAngularPosition;
        returns TPower;
        
        DCL d TangularPosition;
        /* CIF ENDTEXT */
        /* CIF START (95, 137), (70, 35) */
        START;
            /* CIF task (80, 192), (99, 35) */
            task d := abs(x - p);
            /* CIF decision (95, 247), (70, 50) */
            decision d < s;
                /* CIF ANSWER (50, 317), (70, 23) */
                (true):
                    /* CIF return (67, 360), (35, 35) */
                    return (s -d) / s;
                /* CIF ANSWER (140, 317), (70, 23) */
                (false):
                    /* CIF return (157, 360), (35, 35) */
                    return 0.0;
            enddecision;
    endprocedure;
    /* CIF START (363, 366), (70, 35) */
    START;
        /* CIF PROCEDURECALL (352, 421), (91, 35) */
        call InitializeHw;
        /* CIF NEXTSTATE (358, 471), (78, 35) */
        NEXTSTATE IdleMode;
    /* CIF state (1010, 62), (238, 35) */
    state IdleMode, PassiveMode, ActiveMode;
        /* CIF input (1098, 117), (70, 35) */
        input pps;
            /* CIF task (699, 172), (866, 35) */
            task m_hk := {mode m_mode, objectDetection m_objectReport, propulsion {m_power0, m_power1, m_power2, m_power3}, luminance m_sunReport};
            /* CIF output (1094, 227), (77, 35) */
            output hk(m_hk);
            /* CIF PROCEDURECALL (1003, 282), (258, 35) */
            call SunSensor_RequestDataCmd_Pi(m_sun);
            /* CIF NEXTSTATE (1098, 332), (70, 35) */
            NEXTSTATE -;
    endstate;
    /* CIF state (2056, 1212), (78, 35) */
    state IdleMode;
        /* CIF input (2064, 1267), (71, 35) */
        input tc(m_tc);
            /* CIF decision (2045, 1322), (108, 50) */
            decision present(m_tc);
                /* CIF ANSWER (2530, 1392), (106, 23) */
                (tc_goToActive):
                    /* CIF task (2363, 1435), (440, 35) */
                    task m_tm := tm_failed : {id m_tc.tc_goToActive.id, reason fr_incorrectState};
                    /* CIF output (2543, 1490), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (2549, 1545), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (1625, 1392), (91, 23) */
                (tc_goToIdle):
                    /* CIF task (1458, 1435), (426, 35) */
                    task m_tm := tm_failed : {id m_tc.tc_goToIdle.id, reason fr_incorrectState};
                    /* CIF output (1630, 1490), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (1636, 1545), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (2072, 1392), (112, 23) */
                (tc_goToPassive):
                    /* CIF task (1969, 1435), (318, 35) */
                    task m_tm := tm_executed : {id m_tc.tc_goToPassive.id};
                    /* CIF output (2088, 1490), (81, 35) */
                    output tm(m_tm);
                    /* CIF task (1903, 1545), (451, 35) */
                    task m_tm := tm_modechanged : {id m_tc.tc_goToPassive.id, mode m_passive};
                    /* CIF output (2088, 1600), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (2079, 1650), (99, 35) */
                    NEXTSTATE PassiveMode;
            enddecision;
    endstate;
    /* CIF state (635, 1221), (82, 35) */
    state SafeMode;
        /* CIF input (645, 1276), (71, 35) */
        input tc(m_tc);
            /* CIF decision (626, 1331), (108, 50) */
            decision present(m_tc);
                /* CIF ANSWER (1112, 1401), (106, 23) */
                (tc_goToActive):
                    /* CIF task (945, 1444), (440, 35) */
                    task m_tm := tm_failed : {id m_tc.tc_goToActive.id, reason fr_incorrectState};
                    /* CIF output (1125, 1499), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (1131, 1554), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (654, 1401), (112, 23) */
                (tc_goToPassive):
                    /* CIF task (487, 1444), (447, 35) */
                    task m_tm := tm_failed : {id m_tc.tc_goToPassive.id, reason fr_incorrectState};
                    /* CIF output (670, 1499), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (676, 1554), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (207, 1401), (91, 23) */
                (tc_goToIdle):
                    /* CIF task (104, 1444), (297, 35) */
                    task m_tm := tm_executed : {id m_tc.tc_goToIdle.id};
                    /* CIF output (212, 1499), (81, 35) */
                    output tm(m_tm);
                    /* CIF task (49, 1554), (409, 35) */
                    task m_tm := tm_modechanged : {id m_tc.tc_goToIdle.id, mode m_idle};
                    /* CIF output (212, 1609), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (214, 1659), (78, 35) */
                    NEXTSTATE IdleMode;
            enddecision;
    endstate;
    /* CIF state (1050, 877), (93, 35) */
    state ActiveMode;
        /* CIF input (962, 932), (269, 35) */
        input ObjectDetection_Report(m_objectreport);
            /* CIF decision (1020, 987), (155, 50) */
            decision m_objectreport.status;
                /* CIF ANSWER (1021, 1057), (70, 23) */
                (vs_ok):
                    /* CIF PROCEDURECALL (993, 1100), (126, 35) */
                    call SetEnginesPower;
                    /* CIF NEXTSTATE (1021, 1155), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (1220, 1057), (70, 23) */
                else:
                    /* CIF NEXTSTATE (1220, 1100), (70, 35) */
                    NEXTSTATE -;
            enddecision;
    endstate;
    /* CIF state (1039, 396), (176, 35) */
    state PassiveMode, ActiveMode;
        /* CIF input (1009, 451), (245, 35) */
        input SunSensorReturn_ReturnDataCmd_Ri;
            /* CIF decision (995, 506), (271, 50) */
            decision m_sunreport.luminance < m_sunthreshold;
                /* CIF ANSWER (1245, 576), (70, 23) */
                (false):
                    /* CIF NEXTSTATE (1245, 619), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (1052, 576), (70, 23) */
                (true):
                    /* CIF task (934, 619), (304, 35) */
                    task m_tm := tm_modechanged : {id 0, mode m_safe};
                    /* CIF output (1046, 669), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (1045, 724), (82, 35) */
                    NEXTSTATE SafeMode;
            enddecision;
    endstate;
    /* CIF state (2058, 1746), (93, 35) */
    state ActiveMode;
        /* CIF input (2074, 1801), (71, 35) */
        input tc(m_tc);
            /* CIF decision (2055, 1856), (108, 50) */
            decision present(m_tc);
                /* CIF ANSWER (2536, 1926), (106, 23) */
                (tc_goToActive):
                    /* CIF task (2369, 1969), (440, 35) */
                    task m_tm := tm_failed : {id m_tc.tc_goToActive.id, reason fr_incorrectState};
                    /* CIF output (2549, 2024), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (2555, 2079), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (2078, 1926), (112, 23) */
                (tc_goToPassive):
                    /* CIF task (1975, 1969), (318, 35) */
                    task m_tm := tm_executed : {id m_tc.tc_goToPassive.id};
                    /* CIF output (2094, 2024), (81, 35) */
                    output tm(m_tm);
                    /* CIF task (1909, 2079), (451, 35) */
                    task m_tm := tm_modechanged : {id m_tc.tc_goToPassive.id, mode m_passive};
                    /* CIF output (2094, 2134), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (2085, 2184), (99, 35) */
                    NEXTSTATE PassiveMode;
                /* CIF ANSWER (1631, 1926), (91, 23) */
                (tc_goToIdle):
                    /* CIF task (1464, 1969), (426, 35) */
                    task m_tm := tm_failed : {id m_tc.tc_goToIdle.id, reason fr_incorrectState};
                    /* CIF output (1636, 2024), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (1642, 2079), (70, 35) */
                    NEXTSTATE -;
            enddecision;
    endstate;
    /* CIF state (580, 1752), (99, 35) */
    state PassiveMode;
        /* CIF input (600, 1807), (71, 35) */
        input tc(m_tc);
            /* CIF decision (581, 1862), (108, 50) */
            decision present(m_tc);
                /* CIF ANSWER (605, 1932), (112, 23) */
                (tc_goToPassive):
                    /* CIF task (438, 1975), (447, 35) */
                    task m_tm := tm_failed : {id m_tc.tc_goToPassive.id, reason fr_incorrectState};
                    /* CIF output (621, 2030), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (627, 2085), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (158, 1932), (91, 23) */
                (tc_goToIdle):
                    /* CIF task (55, 1975), (297, 35) */
                    task m_tm := tm_executed : {id m_tc.tc_goToIdle.id};
                    /* CIF output (163, 2030), (81, 35) */
                    output tm(m_tm);
                    /* CIF task (0, 2085), (409, 35) */
                    task m_tm := tm_modechanged : {id m_tc.tc_goToIdle.id, mode m_idle};
                    /* CIF output (163, 2140), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (165, 2190), (78, 35) */
                    NEXTSTATE IdleMode;
                /* CIF ANSWER (1063, 1932), (106, 23) */
                (tc_goToActive):
                    /* CIF task (961, 1975), (312, 35) */
                    task m_tm := tm_executed : {id m_tc.tc_goToActive.id};
                    /* CIF output (1076, 2030), (81, 35) */
                    output tm(m_tm);
                    /* CIF task (905, 2085), (423, 35) */
                    task m_tm := tm_modechanged : {id m_tc.tc_goToActive.id, mode m_idle};
                    /* CIF output (1076, 2140), (81, 35) */
                    output tm(m_tm);
                    /* CIF NEXTSTATE (1070, 2190), (93, 35) */
                    NEXTSTATE ActiveMode;
            enddecision;
    endstate;
    /* CIF state (479, 362), (78, 35) */
    state IdleMode;
    endstate;
    /* CIF state (477, 500), (82, 35) */
    state SafeMode;
    endstate;
    /* CIF state (472, 458), (93, 35) */
    state ActiveMode;
    endstate;
    /* CIF state (463, 408), (99, 35) */
    state PassiveMode;
    endstate;
endprocess Manager;